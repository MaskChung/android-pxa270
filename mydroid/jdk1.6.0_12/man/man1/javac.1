." @(#)javac.1  1.27 07/09/14  SMI;
."  Copyright (C) 2006 Sun Microsystems, Inc. All Rights Reserved.
." `
.TH javac 1 "20 Mar 2008"
." Generated from HTML pages by html2man (author: Eric Armstrong)

.LP
.SH "Name"
javac \- Java programming language compiler
.LP
.SH "SYNOPSIS"
.LP

.LP
.nf
\f3
.fl
        \fP\f3javac\fP [ options ] [ sourcefiles ] [ classes ] [ @argfiles ]
.fl
      
.fl
.fi

.LP
.LP
Arguments may be in any order.
.LP
.RS 3

.LP
.RS 3
.TP 3
options 
Command\-line options. 
.TP 3
sourcefiles 
One or more source files to be compiled (such as MyClass.java). 
.TP 3
classes 
One or more classes to be processed for annotations (such as MyPackage.MyClass). 
.TP 3
@argfiles 
One or more files that lists options and source files. The \f2\-J\fP options are not allowed in these files. 
.RE

.LP
.RE
.SH "DESCRIPTION"
.LP

.LP
.LP
The \f3javac\fP tool reads class and interface definitions, written in the Java programming language, and compiles them into bytecode class files. It can also process annotations in Java source files and classes.
.LP
.LP
There are two ways to pass source code file names to \f3javac\fP:
.LP
.RS 3
.TP 2
o
For a small number of source files, simply list the file names on the command line. 
.TP 2
o
For a large number of source files, list the file names in a file, separated by blanks or line breaks. Then use the list file name on the \f3javac\fP command line, preceded by an \f3@\fP character. 
.RE

.LP
.LP
Source code file names must have \f2.java\fP suffixes, class file names must have \f2.class\fP suffixes, and both source and class files must have root names that identify the class. For example, a class called \f2MyClass\fP would be written in a source file called \f2MyClass.java\fP and compiled into a bytecode class file called \f2MyClass.class\fP.
.LP
.LP
Inner class definitions produce additional class files. These class files have names combining the inner and outer class names, such as \f2MyClass$MyInnerClass.class\fP.
.LP
.LP
You should arrange source files in a directory tree that reflects their package tree. For example, if you keep all your source files in \f3/workspace\fP, the source code for \f2com.mysoft.mypack.MyClass\fP should be in \f3/workspace/com/mysoft/mypack/MyClass.java\fP.
.LP
.LP
By default, the compiler puts each class file in the same directory as its source file. You can specify a separate destination directory with \f3\-d\fP (see Options, below).
.LP
.SH "OPTIONS"
.LP

.LP
.LP
The compiler has a set of standard options that are supported on the current development environment and will be supported in future releases. An additional set of non\-standard options are specific to the current virtual machine and compiler implementations and are subject to change in the future. Non\-standard options begin with \f3\-X\fP.
.LP
.SS 
Standard Options
.LP
.RS 3

.LP
.RS 3
.TP 3
\-Akey[=value] 
Options to pass to annotation processors. These are not interpreted by javac directly, but are made available for use by individual processors. \f2key\fP should be one or more identifiers separated by ".". 
.TP 3
\-cp path or \-classpath path 
Specify where to find user class files, and (optionally) annotation processors and source files. This classpath overrides the user class path in the \f3CLASSPATH\fP environment variable. If neither \f3CLASSPATH\fP, \f3\-cp\fP nor \f3\-classpath\fP is specified, the user class path consists of the current directory. See 
.na
\f2Setting the Class Path\fP @
.fi
http://java.sun.com/javase/6/docs/technotes/tools/index.html#classpath for more details. 
.LP
If the \f3\-sourcepath\fP option is not specified, the user class path is also searched for source files. 
.LP
If the \f3\-processorpath\fP option is not specified, the classpath is also searched for annotation processors.  
.LP
As a special convenience, a class path element containing a basename of \f2*\fP is considered equivalent to specifying a list of all the files in the directory with the extension \f2.jar\fP or \f2.JAR\fP.
.br
.br
For example, if directory \f2foo\fP contains \f2a.jar\fP and \f2b.JAR\fP, then the class path element \f2foo/*\fP is expanded to \f2A.jar:b.JAR\fP, except that the order of jar files is unspecified. All jar files in the specified directory, even hidden ones, are included in the list. A classpath entry consisting simply of \f2*\fP expands to a list of all the jar files in the current directory. The \f2CLASSPATH\fP environment variable, where defined, will be similarly expanded. \f3Note:\fP \  Depending of the configuration of your command line environment, you may have to quote the wild card character, for example, \f2javac \-cp "*.jar" MyClass.java\fP.  
.TP 3
\-Djava.ext.dirs=directories 
Override the location of installed extensions. 
.TP 3
\-Djava.endorsed.dirs=directories 
Override the location of endorsed standards path. 
.TP 3
\-d directory 
Set the destination directory for class files. The directory must already exist; \f3javac\fP will not create it. If a class is part of a package, \f3javac\fP puts the class file in a subdirectory reflecting the package name, creating directories as needed. For example, if you specify \f3\-d /home/myclasses\fP and the class is called \f2com.mypackage.MyClass\fP, then the class file is called \f2/home/myclasses/com/mypackage/MyClass.class\fP. 
.LP
If \f3\-d\fP is not specified, \f3javac\fP puts each class files in the same directory as the source file from which it was generated. 
.LP
\f3Note:\fP \  The directory specified by \f3\-d\fP is not automatically added to your user class path.  
.TP 3
\-deprecation 
Show a description of each use or override of a deprecated member or class. Without \f3\-deprecation\fP, \f3javac\fP shows a summary of the source files that use or override deprecated members or classes. \f3\-deprecation\fP is shorthand for \f3\-Xlint:deprecation\fP. 
.TP 3
\-encoding encoding 
Set the source file encoding name, such as \f2EUC\-JP and UTF\-8\fP. If \f3\-encoding\fP is not specified, the platform default converter is used. 
.TP 3
\-g 
Generate all debugging information, including local variables. By default, only line number and source file information is generated. 
.TP 3
\-g:none 
Do not generate any debugging information. 
.TP 3
\-g:{keyword list} 
Generate only some kinds of debugging information, specified by a comma separated list of keywords. Valid keywords are: 
.RS 3
.TP 3
source 
Source file debugging information 
.TP 3
lines 
Line number debugging information 
.TP 3
vars 
Local variable debugging information 
.RE
.TP 3
\-help 
Print a synopsis of standard options. 
.TP 3
\-implicit:{class,none} 
Controls the generation of class files for implicitly loaded source files. To automatically generate class files, use \f3\-implicit:class\fP. To suppress class file generation, use \f3\-implicit:none\fP. If this option is not specified, the default is to automatically generate class files. In this case, the compiler will issue a warning if any such class files are generated when also doing annotation processing. The warning will not be issued if this option is set explicitly. See Searching For Types. 
.TP 3
\-nowarn 
Disable warning messages. This has the same meaning as \f3\-Xlint:none\fP. 
.TP 3
\-proc: {none,only} 
Controls whether annotation processing and/or compilation is done. \f3\-proc:none\fP means that compilation takes place without annotation processing. \f3\-proc:only\fP means that only annotation processing is done, without any subsequent compilation. 
.TP 3
\-processor class1[,class2,class3...] 
Names of the annotation processors to run. This bypasses the default discovery process. 
.TP 3
\-processorpath path 
Specify where to find annotation processors; if this option is not used, the classpath will be searched for processors. 
.TP 3
\-s dir 
Specify the directory where to place generated source files. The directory must already exist; \f3javac\fP will not create it. If a class is part of a package, the compiler puts the source file in a subdirectory reflecting the package name, creating directories as needed. For example, if you specify \f3\-s /home/mysrc\fP and the class is called \f2com.mypackage.MyClass\fP, then the source file will be placed in \f2/home/mysrc/com/mypackage/MyClass.java\fP. 
.TP 3
\-source release 
Specifies the version of source code accepted. The following values for \f2release\fP are allowed: 
.RS 3
.TP 3
1.3 
The compiler does \f2not\fP support assertions, generics, or other language features introduced after JDK 1.3. 
.TP 3
1.4 
The compiler accepts code containing assertions, which were introduced in JDK 1.4. 
.TP 3
1.5 
The compiler accepts code containing generics and other language features introduced in JDK 5. 
.TP 3
5 
Synonym for 1.5. 
.TP 3
1.6 
This is the default value. No language changes were introduced in Java SE 6. However, encoding errors in source files are now reported as errors, instead of warnings, as previously. 
.TP 3
6 
Synonym for 1.6. 
.RE
.TP 3
\-sourcepath sourcepath 
Specify the source code path to search for class or interface definitions. As with the user class path, source path entries are separated by colons (\f3:\fP) and can be directories, JAR archives, or ZIP archives. If packages are used, the local path name within the directory or archive must reflect the package name. 
.LP
\f3Note:\fP \  Classes found through the classpath may be subject to automatic recompilation if their sources are also found. See Searching For Types.  
.TP 3
\-verbose 
Verbose output. This includes information about each class loaded and each source file compiled. 
.TP 3
\-X 
Display information about non\-standard options and exit. 
.RE

.LP
.RE
.SS 
Cross\-Compilation Options
.LP
.RS 3

.LP
.LP
By default, classes are compiled against the bootstrap and extension classes of the platform that \f3javac\fP shipped with. But \f3javac\fP also supports \f2cross\-compiling\fP, where classes are compiled against a bootstrap and extension classes of a different Java platform implementation. It is important to use \f3\-bootclasspath\fP and \f3\-extdirs\fP when cross\-compiling; see Cross\-Compilation Example below.
.LP
.RS 3
.TP 3
\-target version 
Generate class files that target a specified version of the VM. Class files will run on the specified target and on later versions, but not on earlier versions of the VM. Valid targets are \f31.1\fP \f31.2\fP \f31.3\fP \f31.4\fP \f31.5\fP (also \f35\fP) and \f31.6\fP (also \f36\fP). 
.LP
The default for \f3\-target\fP depends on the value of \f3\-source\fP: 
.RS 3
.TP 2
o
If \-source is \f3not specified\fP, the value of \-target is \f31.6\fP 
.TP 2
o
If \-source is \f31.2\fP, the value of \-target is \f31.4\fP 
.TP 2
o
If \-source is \f31.3\fP, the value of \-target is \f31.4\fP 
.TP 2
o
For \f3all other values\fP of \-source, the value of \-target is the value of \f3\-source\fP. 
.RE
.TP 3
\-bootclasspath bootclasspath 
Cross\-compile against the specified set of boot classes. As with the user class path, boot class path entries are separated by colons (\f3:\fP) and can be directories, JAR archives, or ZIP archives. 
.TP 3
\-extdirs directories 
Cross\-compile against the specified extension directories. \f2Directories\fP is a colon\-separated list of directories. Each JAR archive in the specified directories is searched for class files. 
.RE

.LP
.RE
.SS 
Non\-Standard Options
.LP
.RS 3

.LP
.RS 3
.TP 3
\-Xbootclasspath/p:path 
Prepend to the bootstrap class path. 
.TP 3
\-Xbootclasspath/a:path 
Append to the bootstrap class path. 
.TP 3
\-Xbootclasspath/:path 
Override location of bootstrap class files. 
.TP 3
\-Xlint 
Enable all recommended warnings. In this release, all available warnings are recommended. 
.TP 3
\-Xlint:none 
Disable all warnings not mandated by the Java Language Specification. 
.TP 3
\-Xlint:\-name 
Disable warning \f2name\fP, where \f2name\fP is one of the warning names supported for \f3\-Xlint:\fP\f2name\fP, below. 
.TP 3
\-Xlint:unchecked 
Give more detail for unchecked conversion warnings that are mandated by the Java Language Specification. 
.TP 3
\-Xlint:path 
Warn about nonexistent path (classpath, sourcepath, etc) directories. 
.TP 3
\-Xlint:serial 
Warn about missing \f2serialVersionUID\fP definitions on serializable classes. 
.TP 3
\-Xlint:finally 
Warn about \f2finally\fP clauses that cannot complete normally. 
.TP 3
\-Xlint:fallthrough 
Check \f2switch\fP blocks for fall\-through cases and provide a warning message for any that are found. Fall\-through cases are cases in a \f2switch\fP block, other than the last case in the block, whose code does not include a \f2break\fP statement, allowing code execution to "fall through" from that case to the next case. For example, the code following the \f2case 1\fP label in this \f2switch\fP block does not end with a \f2break\fP statement: 
.RS 3

.LP
.nf
\f3
.fl
switch (x) {
.fl
case 1:
.fl
       System.out.println("1");
.fl
       //  No  break;  statement here.
.fl
case 2:
.fl
       System.out.println("2");
.fl
}
.fl
            
.fl
\fP
.fi
.RE
If the \f2\-Xlint:fallthrough\fP flag were used when compiling this code, the compiler would emit a warning about "possible fall\-through into case," along with the line number of the case in question. 
.TP 3
\-Xmaxerrors number 
Set the maximum number of errors to print. 
.TP 3
\-Xmaxwarns number 
Set the maximum number of warnings to print. 
.TP 3
\-Xstdout filename 
Send compiler messages to the named file. By default, compiler messages go to \f2System.err\fP. 
.TP 3
\-Xprefer:{newer,source} 
Specify which file to read when both a source file and class file are found for a type. (See Searching For Types). If \f2\-Xprefer:newer\fP is used, it reads the newer of the source or class file for a type (default). If the \f2\-Xprefer:source\fP option is used, it reads source file. Use \f2\-Xprefer:source\fP when you want to be sure that any annotation processors can access annotations declared with a retention policy of \f2SOURCE\fP. 
.TP 3
\-Xprint 
Print out textual representation of specified types for debugging purposes; perform neither annotation processing nor compilation. The format of the output may change. 
.TP 3
\-XprintProcessorInfo 
Print information about which annotations a processor is asked to process. 
.TP 3
\-XprintRounds 
Print information about initial and subsequent annotation processing rounds. 
.RE

.LP
.RE
.SS 
The \-J Option
.LP
.RS 3

.LP
.RS 3
.TP 3
\-Joption 
Pass \f2option\fP to the \f3java\fP launcher called by \f3javac\fP. For example, \f3\-J\-Xms48m\fP sets the startup memory to 48 megabytes. Although it does not begin with \f3\-X\fP, it is not a `standard option' of \f3javac\fP. It is a common convention for \f3\-J\fP to pass options to the underlying VM executing applications written in Java. 
.LP
\f3Note:\fP \  \f3CLASSPATH\fP, \f3\-classpath\fP, \f3\-bootclasspath\fP, and \f3\-extdirs\fP do \f2not\fP specify the classes used to run \f3javac\fP. Fiddling with the implementation of the compiler in this way is usually pointless and always risky. If you do need to do this, use the \f3\-J\fP option to pass through options to the underlying \f3java\fP launcher.  
.RE

.LP
.RE
.SH "COMMAND LINE ARGUMENT FILES"
.LP

.LP
.LP
To shorten or simplify the javac command line, you can specify one or more files that themselves contain arguments to the \f2javac\fP command (except \f2\-J\fP options). This enables you to create javac commands of any length on any operating system.
.LP
.LP
An argument file can include javac options and source filenames in any combination. The arguments within a file can be space\-separated or newline\-separated. If a filename contains embedded spaces, put the whole filename in double quotes.
.LP
.LP
Filenames within an argument file are relative to the current directory, not the location of the argument file. Wildcards (*) are not allowed in these lists (such as for specifying \f2*.java\fP). Use of the '\f2@\fP' character to recursively interpret files is not supported. The \f2\-J\fP options are not supported because they are passed to the launcher, which does not support argument files.
.LP
.LP
When executing javac, pass in the path and name of each argument file with the '\f2@\fP' leading character. When javac encounters an argument beginning with the character `\f2@\fP', it expands the contents of that file into the argument list.
.LP
.SS 
Example \- Single Arg File
.LP
.LP
You could use a single argument file named "\f2argfile\fP" to hold all javac arguments:
.LP
.nf
\f3
.fl
  % \fP\f3javac @argfile\fP
.fl
      
.fl
.fi

.LP
.LP
This argument file could contain the contents of both files shown in the next example.
.LP
.SS 
Example \- Two Arg Files
.LP
.LP
You can create two argument files \-\- one for the javac options and the other for the source filenames: (Notice the following lists have no line\-continuation characters.)
.LP
.LP
Create a file named "\f2options\fP" containing:
.LP
.nf
\f3
.fl
     \-d classes
.fl
     \-g
.fl
     \-sourcepath /java/pubs/ws/1.3/src/share/classes
.fl
      
.fl
\fP
.fi

.LP
.LP
Create a file named "\f2classes\fP" containing:
.LP
.nf
\f3
.fl
     MyClass1.java
.fl
     MyClass2.java
.fl
     MyClass3.java
.fl
      
.fl
\fP
.fi

.LP
.LP
You would then run \f3javac\fP with:
.LP
.nf
\f3
.fl
  % \fP\f3javac @options @classes\fP
.fl
      
.fl
.fi

.LP
.SS 
Example \- Arg Files with Paths
.LP
.LP
The argument files can have paths, but any filenames inside the files are relative to the current working directory (not \f2path1\fP or \f2path2\fP):
.LP
.nf
\f3
.fl
  % \fP\f3javac @path1/options @path2/classes\fP
.fl
      
.fl
.fi

.LP
.SH "ANNOTATION PROCESSING"
.LP

.LP
.LP
\f3javac\fP provides direct support for annotation processing, superseding the need for the separate annotation processing tool, \f3apt\fP.
.LP
.LP
The API for annotation processors is defined in the \f2javax.annotation.processing\fP and \f2javax.lang.model\fP packages and subpackages.
.LP
.SS 
Overview of annotation processing
.LP
.LP
Unless annotation processing is disabled with the \f3\-proc:none\fP option, the compiler searches for any annotation processors that are available. The search path can be specified with the \f3\-processorpath\fP option; if it is not given, the user class path is used. Processors are located by means of service provider\-configuration files named
.br
\f2\  META\-INF/services/javax.annotation.processing.Processor\fP
.br
on the search path. Such files should contain the names of any annotation processors to be used, listed one per line. Alternatively, processors can be specified explicitly, using the \f3\-processor\fP option.
.LP
.LP
After scanning the source files and classes on the command line to determine what annotations are present, the compiler queries the processors to determine what annotations they process. When a match is found, the processor will be invoked. A processor may "claim" the annotations it processes, in which case no further attempt is made to find any processors for those annotations. Once all annotations have been claimed, the compiler does not look for additional processors.
.LP
.LP
If any processors generate any new source files, another round of annotation processing will occur: any newly generated source files will be scanned, and the annotations processed as before. Any processors invoked on previous rounds will also be invoked on all subsequent rounds. This continues until no new source files are generated.
.LP
.LP
After a round occurs where no new source files are generated, the annotation processors will be invoked one last time, to give them a chance to complete any work they may need to do. Finally, unless the \f3\-proc:only\fP option is used, the compiler will compile the original and all the generated source files.
.LP
.SS 
Implicitly loaded source files
.LP
.LP
To compile a set of source files, the compiler may need to implicitly load additional source files. (See Searching For Types). Such files are currently not subject to annotation processing. By default, the compiler will give a warning if annotation processing has occurred and any implicitly loaded source files are compiled. See the \-implicit option for ways to suppress the warning.
.LP
.SH "SEARCHING FOR TYPES"
.LP

.LP
.LP
When compiling a source file, the compiler often needs information about a type whose definition did not appear in the source files given on the command line. The compiler needs type information for every class or interface used, extended, or implemented in the source file. This includes classes and interfaces not explicitly mentioned in the source file but which provide information through inheritance.
.LP
.LP
For example, when you subclass \f3java.applet.Applet\fP, you are also using \f3Applet's\fP ancestor classes: \f3java.awt.Panel\fP, \f3java.awt.Container\fP, \f3java.awt.Component\fP, and \f3java.lang.Object\fP.
.LP
.LP
When the compiler needs type information, it looks for a source file or class file which defines the type. The compiler searches for class files first in the bootstrap and extension classes, then in the user class path (which by default is the current directory). The user class path is defined by setting the \f3CLASSPATH\fP environment variable or by using the \f3\-classpath\fP command line option. (For details, see 
.na
\f2Setting the Class Path\fP @
.fi
http://java.sun.com/javase/6/docs/technotes/tools/index.html#classpath).
.LP
.LP
If you set the \-sourcepath option, the compiler searches the indicated path for source files; otherwise the compiler searches the user class path for both class files and source files.
.LP
.LP
You can specify different bootstrap or extension classes with the \f3\-bootclasspath\fP and \f3\-extdirs\fP options; see Cross\-Compilation Options below.
.LP
.LP
A successful type search may produce a class file, a source file, or both. If both are found, you can use the \-Xprefer option to instruct the compiler which to use. If \f3newer\fP is given, the compiler will use the newer of the two files. If \f3source\fP is given, it will use the source file. The default is \f3newer\fP.
.LP
.LP
If a type search finds a source file for a required type, either by itself, or as a result of the setting for \f3\-Xprefer\fP, the compiler will read the source file to get the information it needs. In addition, it will by default compile the source file as well. You can use the \-implicit option to specify the behavior. If \f3none\fP is given, no class files will be generated for the source file. If \f3class\fP is given, class files will be generated for the source file.
.LP
.LP
The compiler may not discover the need for some type information until after annotation processing is complete. If the type information is found in a source file and no \f3\-implicit\fP option is given, the compiler will give a warning that the file is being compiled without being subject to annotation processing. To disable the warning, either specify the file on the command line (so that it will be subject to annotation processing) or use the \f3\-implicit\fP option to specify whether or not class files should be generated for such source files.
.LP
.SH "PROGRAMMATIC INTERFACE"
.LP

.LP
.LP
\f3javac\fP supports the new Java Compiler API defined by the classes and interfaces in the \f2javax.tools\fP package.
.LP
.SS 
Example
.LP
.LP
To perform a compilation using arguments as you would give on the command line, you can use the following:
.LP
.nf
\f3
.fl
JavaCompiler javac = ToolProvider.getSystemJavaCompiler();
.fl
int rc = javac.run(null, null, null, args);
.fl
      
.fl
\fP
.fi

.LP
.LP
This will write any diagnostics to the standard output stream, and return the exit code that \f3javac\fP would give when invoked from the command line.
.LP
.LP
You can use other methods on the \f2javax.tools.JavaCompiler\fP interface to handle diagnostics, control where files are read from and written to, and so on.
.LP
.SS 
Old Interface
.LP
.RS 3

.LP
.LP
\f3Note:\fP \  This API is retained for backwards compatibility only; all new code should use the Java Compiler API, described above.
.LP
.LP
The \f2com.sun.tools.javac.Main\fP class provides two static methods to invoke the compiler from a program:
.LP
.nf
\f3
.fl
public static int compile(String[] args);
.fl
public static int compile(String[] args, PrintWriter out);
.fl
      
.fl
\fP
.fi

.LP
.LP
The \f2args\fP parameter represents any of the command line arguments that would normally be passed to the javac program and are outlined in the above Synopsis section.
.LP
.LP
The \f2out\fP parameter indicates where the compiler's diagnostic output is directed.
.LP
.LP
The return value is equivalent to the exit value from \f3javac\fP.
.LP
.LP
Note that all \f3other\fP classes and methods found in a package whose name starts with \f2com.sun.tools.javac\fP (informally known as sub\-packages of \f2com.sun.tools.javac\fP) are strictly internal and subject to change at any time.
.LP
.RE
.SH "EXAMPLES"
.LP
.SS 
Compiling a Simple Program
.LP
.RS 3

.LP
.LP
One source file, \f2Hello.java\fP, defines a class called \f3greetings.Hello\fP. The \f2greetings\fP directory is the package directory both for the source file and the class file and is off the current directory. This allows us to use the default user class path. It also makes it unnecessary to specify a separate destination directory with \f3\-d\fP.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3ls\fP
.fl
greetings/
.fl
% \f3ls greetings\fP
.fl
Hello.java
.fl
% \f3cat greetings/Hello.java\fP
.fl
package greetings;
.fl

.fl
public class Hello {
.fl
    public static void main(String[] args) {
.fl
        for (int i=0; i < args.length; i++) {
.fl
            System.out.println("Hello " + args[i]);
.fl
        }
.fl
    }
.fl
}
.fl
% \f3javac greetings/Hello.java\fP
.fl
% \f3ls greetings\fP
.fl
Hello.class   Hello.java
.fl
% \f3java greetings.Hello World Universe Everyone\fP
.fl
Hello World
.fl
Hello Universe
.fl
Hello Everyone
.fl
        
.fl
.fi
.RE

.LP
.RE
.SS 
Compiling Multiple Source Files
.LP
.RS 3

.LP
.LP
This example compiles all the source files in the package \f2greetings\fP.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3ls\fP
.fl
greetings/
.fl
% \f3ls greetings\fP
.fl
Aloha.java         GutenTag.java      Hello.java         Hi.java
.fl
% \f3javac greetings/*.java\fP
.fl
% \f3ls greetings\fP
.fl
Aloha.class         GutenTag.class      Hello.class         Hi.class
.fl
Aloha.java          GutenTag.java       Hello.java          Hi.java
.fl

.fl
        
.fl
.fi
.RE

.LP
.RE
.SS 
Specifying a User Class Path
.LP
.RS 3

.LP
.LP
Having changed one of the source files in the previous example, we recompile it:
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3pwd\fP
.fl
/examples
.fl
% \f3javac greetings/Hi.java\fP
.fl
        
.fl
.fi
.RE

.LP
.LP
Since \f2greetings.Hi\fP refers to other classes in the \f2greetings\fP package, the compiler needs to find these other classes. The example above works, because our default user class path happens to be the directory containing the package directory. But suppose we want to recompile this file and not worry about which directory we're in? Then we need to add \f2/examples\fP to the user class path. We can do this by setting \f3CLASSPATH\fP, but here we'll use the \f3\-classpath\fP option.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3javac \-classpath /examples /examples/greetings/Hi.java\fP
.fl
        
.fl
.fi
.RE

.LP
.LP
If we change \f2greetings.Hi\fP again, to use a banner utility, that utility also needs to be accessible through the user class path.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3javac \-classpath /examples:/lib/Banners.jar \\ 
.fl
            /examples/greetings/Hi.java\fP
.fl
        
.fl
.fi
.RE

.LP
.LP
To execute a class in \f2greetings\fP, we need access both to \f2greetings\fP and to the classes it uses.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3java \-classpath /examples:/lib/Banners.jar greetings.Hi\fP
.fl
        
.fl
.fi
.RE

.LP
.RE
.SS 
Separating Source Files and Class Files
.LP
.RS 3

.LP
.LP
It often makes sense to keep source files and class files in separate directories, especially on large projects. We use \f3\-d\fP to indicate the separate class file destination. Since the source files are not in the user class path, we use \f3\-sourcepath\fP to help the compiler find them.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3ls\fP
.fl
classes/  lib/      src/
.fl
% \f3ls src\fP
.fl
farewells/
.fl
% \f3ls src/farewells\fP
.fl
Base.java      GoodBye.java
.fl
% \f3ls lib\fP
.fl
Banners.jar
.fl
% \f3ls classes\fP
.fl
% \f3javac \-sourcepath src \-classpath classes:lib/Banners.jar \\ 
.fl
            src/farewells/GoodBye.java \-d classes\fP
.fl
% \f3ls classes\fP
.fl
farewells/
.fl
% \f3ls classes/farewells\fP
.fl
Base.class      GoodBye.class
.fl

.fl
        
.fl
.fi
.RE

.LP
.LP
\f3Note:\fP \  The compiler compiled \f2src/farewells/Base.java\fP, even though we didn't specify it on the command line. To trace automatic compiles, use the \f3\-verbose\fP option.
.LP
.RE
.SS 
Cross\-Compilation Example
.LP
.RS 3

.LP
.LP
Here we use \f3javac\fP to compile code that will run on a 1.5 VM.
.LP
.RS 3

.LP
.nf
\f3
.fl
% \fP\f3javac \-target 1.5 \-bootclasspath jdk1.5.0/lib/rt.jar \\ 
.fl
            \-extdirs "" OldCode.java\fP
.fl
        
.fl
.fi
.RE

.LP
.LP
The \f3\-target 1.5\fP option ensures that the generated class files will be compatible with 1.5 VMs. By default, \f3javac\fP compiles for JDK 6.
.LP
.LP
The Java Platform JDK's \f3javac\fP would also by default compile against its own bootstrap classes, so we need to tell \f3javac\fP to compile against JDK 1.5 bootstrap classes instead. We do this with \f3\-bootclasspath\fP and \f3\-extdirs\fP. Failing to do this might allow compilation against a Java Platform API that would not be present on a 1.5 VM and would fail at runtime.
.LP
.RE
.SH "SEE ALSO"
.LP

.LP
.RS 3
.TP 2
o
.na
\f2The javac Guide\fP @
.fi
http://java.sun.com/javase/6/docs/technotes/guides/javac/index.html 
.TP 2
o
java(1) \- the Java Application Launcher 
.TP 2
o
jdb(1) \- Java Application Debugger 
.TP 2
o
javah(1) \- C Header and Stub File Generator 
.TP 2
o
javap(1) \- Class File Disassembler 
.TP 2
o
javadoc(1) \- API Documentation Generator 
.TP 2
o
jar(1) \- JAR Archive Tool 
.TP 2
o
.na
\f2The Java Extensions Framework\fP @
.fi
http://java.sun.com/javase/6/docs/technotes/guides/extensions/index.html 
.RE

.LP

.LP
 
