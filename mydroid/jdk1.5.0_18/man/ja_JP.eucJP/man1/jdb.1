'\" t
.\" @(#)jdb.1 1.10 00/06/13 SMI;
.\" Copyright 2003 Sun Microsystems, Inc. All rights reserved.
.\" Copyright 2003 Sun Microsystems, Inc. Tous droits r蜩erv蜩.
.\" 
.\" 
.\"  This document was created by saving an HTML file as text
.\"  from the JavaSoft web site:
.\" 
.\" http://java.sun.com/j2se/1.4/docs/tooldocs/tools.html
.\" 
.\"  and adding appropriate troff macros.  Because the JavaSoft web site 
.\"  man pages can change without notice, it may be helpful to diff
.\"  files to identify changes other than new functionality. 
.\" 
.TH jdb 1 "2004 年 6 月 22 日"
.SH "名前"
jdb \- Java デバッガ
.SH "形式"
.B jdb 
[ 
.I options
] [
.I class
] [
.I  arguments
]
.SH "パラメータ"
.TP 15
.I options
コマンド行オプション
.TP
.I class
デバッグを開始するクラス名
.TP
.I arguments
クラスの
.B main(\|)
メソッドに渡される引数
.SH "機能説明"
.IX "Java debugger" "" "Java debugger \(em \fLjdb\fP"
.IX "jdb" "" "\fLjdb\fP \(em Java debugger"
Java デバッガの
.BR jdb
は、
Java
クラス用の単純なコマンド行デバッガです。
.B Java Platform Debugger Architecture
を画面に表示しながら実行し、ローカルまたはリモートの Java Virtual Machine
の検査とデバッグを行うことができます。
.SS "jdb セッションの開始"
.IX "jdb" "Starting a jdb Session" "\fLjdb\fP \(em Java debugger"
jdb セッションを開始するにはさまざまな方法があります。 もっとも頻繁に使
われるのは、アプリケーションのメインクラスをデバッグして、
.B jdb
から新しく Java Virtual Machine (VM) を起動する方法です。 コマンド行で、
.BR java (1)
の代わりに
.B jdb
コマンドを入力します。たとえば、アプリケーションのメインクラスが
.BR MyClass
の場合は、次のコマンドを使用して jdb 環境でデバッグします。
.LP
.RS
.B example% jdb MyClass
.RE
.LP
このようにして起動すると、
.B jdb
は 2 つ目の Java VM を呼び出し、指定されたパラメータを渡し、
指定されたクラスをロードします。そのあと、
クラスの最初の命令を実行する前に VM を停止させます。
.LP
.B jdb
のもう 1 つの使用方法は、すでに起動している Java VM に
.B jdb
を接続することです。
.B jdb
を使用してデバッグする VM は、次のオプションを使用して起動しなけれ
ばなりません。 
.LP
.TS
box;
cbp-1 | cbp-1
lb | l 
lb | l .
オプション	目的
=
\-Xdebug	VM 内でのデバッグのサポートを有効にする
_
T{
.na
\-Xrunjdwp:transport=dt_socket,
server=y,suspend=n
T}	T{
.na
プロセス内デバッグライブラリをロードし、作成する接続の種類を指定する
T}
.TE
.LP
たとえば、次のコマンドは
.B MyClass
アプリケーションを実行し、後で
.B jdb 
を接続できるようにします。
.LP
.RS 
.nf
.ft 3
example% jdb \-Xdebug \\
   \-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n 
\MyClass
.ft 1
.fi
.RE
.LP
次のコマンドで
.B jdb 
を VM に接続できます。
.LP
.RS
.B example% jdb \-attach 8000
.RE
.LP
このとき、
.B jdb
は新しい VM を起動するのではなく、既存の VM に接続するので、
.B jdb 
コマンド行で
.B MyClass
を指定しないことに注意してください。
.LP
これ以外にもデバッガ (jdb) を VM に接続する方法はたくさんあり、
.BR jdb
はそのすべての方法をサポートしています。
このような接続オプションについては、
Java Platform Debugger Architecture のマニュアルを参照してください。
.SS " jdb 基本コマンド"
.IX "jdb" "Basic jdb Commands" "\fLjdb\fP \(em Java debugger"
以下に
.B jdb
基本コマンドの一覧を示します。
Java
デバッガで使用可能なその他のコマンドは、
.B help
コマンドで表示できます。
.LP
なお局所
(スタック)
変数をブラウズするには、そのクラスが
.B javac \-g
オプションでコンパイルされている必要があります。
.TP 15
.B cont
ブレークポイント、例外、またはステップ実行のあとで、デバッグ中の
アプリケーションの実行を継続します。
.TP
.B dump
プリミティブ値の場合には、このコマンドは
.BR print
と同じです。オブジェクトの場合には、オブジェクト内に定義されている
各フィールドの現在の値を出力します。 static フィールドと instance
フィールドを出力します。 
.sp 1n
.B dump
コマンドは、
.B print
コマンドと同じ式をサポートします。 
.TP
\f3help\fP または \f3?\fP
.B jdb
のコマンドの中でもっとも重要なのが、この
.B help
コマンドです。利用可能なコマンドの一覧を、
各コマンドの簡単な説明つきで表示します。
.TP 15
.B print
Java オブジェクトおよびプリミティブ値を表示します。 プリミティブ型の変数
またはフィールドの場合には、実際の値を出力します。 オブジェクトの場合
には、短い説明を出力します。 オブジェクトについては、以降の
.B dump
コマンドの説明を参照してください。 
.sp 1n
.B print
は、メソッドの呼び出しを含む多数の簡単な Java 式をサポートします。
次に例を示します。 
.RS
.TP 3
\(bu
.B print MyClass.myStaticField 
.PD 0
.TP
\(bu
.B print myObj.myInstanceField 
.TP
\(bu
\f3print\f1 \f2i\f1 \f3+\f1 \f2j\f1 \f3+\f1 \f2k\f1 (
.IR i、
.IR j 、
および 
.I k
はプリミティブであり、フィールドまたは局所変数のいずれか) 
.TP
\(bu
\f3print myObj.myMethod(\|)\f1 (
.B myMethod
が null 以外を返す場合) 
.TP
\(bu
.B print new java.lang.String("Hello").length(\|)
.RE
.PD
.TP 15
.B thread
現在のスレッドを選択します。 多くの
.B jdb
コマンドは、現在のスレッドの設定に基づいて実行されます。 スレッドは、
.B threads 
コマンドで説明するスレッドインデックスとともに指定します。 
.TP
.B threads
現在実行中のスレッドを一覧表示します。スレッドごとに、名前と現在の状態、
およびほかのコマンドに使用できるインデックスを出力します。次に例を
示します。 
.sp 1n
.RS 20
.B 4. (java.lang.Thread)0x1 main      running
.RE
.RS 15
.sp 1n
この例では、スレッドインデックスは
.BR 4
であり、スレッドは
.BR java.lang.Thread 
のインスタンスです。スレッドの名前は「
.BR main
」であり、現在実行中です。 
.RE
.TP 15
.B run
.BR jdb
を起動して必要なブレークポイントを設定したあとに、このコマンドを使用して、
デバッグするアプリケーションの実行を開始します。このコマンドは、
デバッグするアプリケーションを
.B jdb
から起動するときにだけ使用できます。 
既存の VM に接続する場合とは異なります。
.TP 15
.B where
引数のない
.B where
コマンドは、現在のスレッド
(
.B thread
コマンドで設定)
のスタックをダンプします。
.B where all
と指定すると、現在のスレッドグループにある全スレッドの
スタックをダンプします。
.BI where " threadindex"
と指定すると、
.I threadindex
が示すスレッドのスタックだけをダンプします。
現在のスレッドが (ブレークポイントなどのイベントや
.B suspend
コマンドで) 中断している場合、
.B print 
コマンドや
.B dump
コマンドを使用すれば、局所変数やフィールドを表示できます。
どのスタックフレームを現在のフレームにするかは、
.B up
および
.B down
コマンドで選択できます。
.SS "ブレークポイント用コマンド"
.IX "jdb" "Breakpoints" "\fLjdb\fP \(em Java debugger"
.B jdb
では、ブレークポイントを行番号で、
またはメソッドの最初の命令で
設定できます。次に例を示します。
.TP 25
.B stop at MyClass:22
.BR MyClass
が含まれるソースファイルの
.B 22
行目の最初の命令にブレークポイントを設定する
.TP
.B stop in java.lang.String.length
.BR java.lang.String.length
メソッドの最初にブレークポイントを設定する
.TP
.BI "stop in MyClass." init
.I init
は
.B MyClass
コンストラクタを識別する
.TP
.BI "stop in MyClass." clinit
.I clinit
は
.BR MyClass
の静的な初期化コードを識別する 
.LP
メソッドがオーバーロードされる場合には、メソッドの引数の型も指定して、
ブレークポイントに対して適切なメソッドが選択されるようにしなければなりませ
ん。 たとえば、次のように指定します。
.LP
.RS 15
.B MyClass.myMethod(int,java.lang.String)
.RE
.LP
または
.LP
.RS 15
.B MyClass.myMethod() 
.RE
.LP
.B clear
コマンドは、「
.BR clear MyClass:45
」のような構文を使用してブレークポイントを削除します。
引数を指定しないで
.B clear
コマンドを使用すると、現在設定されてい
るすべてのブレークポイントが表示されます。
.B cont
コマンドで実行が継続します。 
.SS "コマンドのステップ実行"
.IX "jdb" "Stepping" "\fLjdb\fP \(em Java debugger"
.B step
コマンドは、現在のスタックフレームまたは呼び出されたメソッド内で、
次の行を実行します。 
.B next
コマンドは、現在のスタックフレームの次の行を
実行します。 
.SS "例外処理用コマンド"
.IX "jdb" "Exceptions" "\fLjdb\fP \(em Java debugger"
スローしているスレッドの呼び出しスタック上のどこにも catch 文がないような
例外が発生すると、VM は通常、例外トレースを出力して終了します。 ただし、
.BR jdb 
環境で実行している場合は、このような例外が発生すると
.B jdb
に制御が戻ります。 次に、
.BR jdb 
を使用して例外の原因を診断します。 
.TP 15
.B catch
デバッグ中のアプリケーションは他の例外がスローされたところで停止します。
次に例を示します。
.LP
.RS 20
.B catch java.io.FileNotFoundException
.RE
.sp 1n
.RS 15
または
.RE
.LP
.RS 20
.B catch mypackage.BigTroubleException
.RE
.sp 1n
.RS 15
例外が指定したクラス (または、サブクラス) のインスタンスである場合、
アプリケーションはスローされたところで停止します。
.RE
.TP 15
.B ignore
以前の
.B catch
コマンドの効果を無効にします。なお、この指定によって例外を無視するのは
デバッガだけであり、デバッグされた VM は無視しません。
.SH "オプション"
コマンド行で Java アプリケーション起動ツールの代わりに
.B jdb
を使用する場合、
.B jdb
 は、
.BR \-D、
.BR \-classpath、
.BI \-X option\f1
など、
.BR java (1)
コマンドと同じオプションを多数使用できます。
.LP
.B jdb 
は、そのほかに次のオプションも使用できます。 
.TP 15
.BI \-sourcepath " dir1\f1:\f2dir2\f1:..."
指定されたパスで、ソースファイルを検索します。 このオプションが
指定されていない場合は、デフォルトパスの「.」を検索します。 
.TP
.BI \-attach " address"
デフォルトの接続機構を使用して、すでに実行中の VM にデバッガを接続
します。 
.TP
.B \-launch
デバッグするアプリケーションを
.BR jdb
の起動後ただちに起動します。 このオプションを使用すると、
.B run
コマンドを使用する必要はありません。 デバッグするアプリケーションは、
起動後、最初のアプリケーションクラスがロードされる直前に停止します。
その時点で、必要なブレークポイントを設定できます。
実行を継続するには
.B cont
コマンドを使用します。
.TP
.BI \-J "option"
.I option
を Java 仮想マシンに渡します。ここで、
.I option
は、Java アプリケーション起動プログラム java(1) のマニュアルページで
説明されているオプションの 1 つです。たとえば、
.I \-J-Xms48m
は、起動時に使用するメモリを 48M バイトに設定します。
.B \-J
が基本にする仮想マシンにオプションを渡すことは、共通の規約です。


.LP
これ以外にも、デバッガをデバッグされる VM に接続するための代替機構
用のオプションがサポートされています。このような接続の代替機構については、
Java Platform Debugger Architecture のマニュアルを参照してください。
.SH "関連項目"
.BR java (1),
.BR javac (1),
.BR javadoc (1),
.BR javah (1),
.BR javap (1)
.LP
