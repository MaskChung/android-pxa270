#!/usr/bin/perl -w

# Copyright (C) 2006 Apple Computer, Inc.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
# 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
#
# THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Script to generate HTML wrappers for JavaScript tests from templates

use strict;
use FindBin;
use lib $FindBin::Bin;
use webkitdirs;

setConfiguration();
my $productDir = productDir();

use strict;

chdirWebKit();

my @templates = `find LayoutTests -name "TEMPLATE.html"`;

for my $tfile (@templates) {

    chomp $tfile;

    my $tpath = $tfile;
    $tpath =~ s:/resources/TEMPLATE.html$::;

    print "${tpath}\n";

    chdirWebKit();
    chdir($tpath);

    my @files = `find resources -name "*.js"`;

    open TEMPLATE, "<resources/TEMPLATE.html";
    my $template = do { local $/; <TEMPLATE> };
    close TEMPLATE;

    my $templateNegative = $template;
    if (-e "resources/TEMPLATE-n.html") {
        open TEMPLATE, "<resources/TEMPLATE-n.html";
        $templateNegative = do { local $/; <TEMPLATE> };
        close TEMPLATE;
    }

    for my $file (@files) {
        chomp $file;
        next if $file =~ /js-test-.*\.js$/;
        next if $file =~ /SVGTestCase\.js/;
        next if $file =~ m:resources/attr-case-sensitivity\.js$:;
        next if $file =~ m:resources/frame-loading-via-document-write\.js$:;
        next if $file =~ m:resources/intersectsNode\.js$:;
        next if $file =~ m:resources/script-element-gc\.js$:;
        next if $file =~ m:resources/script-element-gc\.js$:;
        next if $file =~ m:resources/script3\.js$:;
        next if $file =~ m:resources/script4\.js$:;
        next if $file =~ m:resources/script5\.js$:;
        next if $file =~ m:resources/select-options-remove\.js$:;
        next if $file =~ m:resources/wrapper-identity-base\.js$:;

        my $html = $file;
        $html =~ s:resources/(.*)\.js:$1.html:;
        next if -f "$html-disabled";

        system("grep -q 'successfullyParsed =' $file");
        if ($? != 0) {
            `echo "" >> "${file}"`;
            `echo "var successfullyParsed = true;" >> "${file}"`;
        }
        
        print "    ${html}\n";
        open HTML, ">$html";
        my $output = ($file =~ /-n\.js/) ? $templateNegative : $template;
        $output =~ s:YOUR_JS_FILE_HERE:$file:;
        print HTML $output;
        
        close HTML;
    }
}
