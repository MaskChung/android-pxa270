#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1143748258',
        'name' => 'bug/comments.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n";
    #line 24 "template/en/custom/bug/comments.html.tmpl"
    $output .=  $context->process('bug/time.html.tmpl');
    $output .=  "\n";
    #line 26 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('start_at', 0, 1);
    $stash->set('mode', 'show', 1);
    #line 27 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('isinsider', $stash->get(['Param', [ 'insidergroup' ]]) && $stash->get(['UserInGroup', [ $stash->get(['Param', [ 'insidergroup' ]]) ]]));
    #line 28 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('sort_order', $stash->get(['user', 0, 'settings', 0, 'comment_sort_order', 0, 'value', 0]));
    $output .=  "\n\n";
    #line 35 "template/en/custom/bug/comments.html.tmpl"
    if (($stash->get('start_at') > 0)) {
    #line 34 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('sort_order', 'oldest_to_newest');
    }
    
    $output .=  "\n\n\n";
    #line 52 "template/en/custom/bug/comments.html.tmpl"
    if ($stash->get('sort_order') eq 'oldest_to_newest') {
    #line 40 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('count', 0);
    #line 41 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('description', 0);
    #line 42 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('increment', 1);
    }
    else {
    #line 44 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('increment', -1);
    #line 51 "template/en/custom/bug/comments.html.tmpl"
    if ($stash->get('sort_order') eq 'newest_to_oldest') {
    #line 46 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('count', $stash->get(['comments', 0, 'size', 0]) - 1);
    #line 47 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('description', 0);
    }
    elsif ($stash->get('sort_order') eq 'newest_to_oldest_desc_first') {
    #line 49 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('count', $stash->get(['comments', 0, 'size', 0]));
    #line 50 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('description', $stash->get(['comments', 0, 'size', 0]));
    }
    
    }
    
    $output .=  "\n\n";
    #line 61 "template/en/custom/bug/comments.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('comments');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'comment'} = $value;
    #line 58 "template/en/custom/bug/comments.html.tmpl"
    if ($stash->get('count') >= $stash->get('start_at')) {
    #line 57 "template/en/custom/bug/comments.html.tmpl"
    $output .=  $context->process('a_comment');
    }
    
    $output .=  "\n  ";
    #line 60 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('count', $stash->get('count') + $stash->get('increment'));;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n\n";
    $output .=  "  ";
    #line 66 "template/en/custom/bug/comments.html.tmpl"
    $output .=  $stash->get(['Hook', 0, 'process', [ 'aftercomments' ]]);
    $output .=  "\n\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n";
    
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'a_comment' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        #line 136 "template/en/custom/bug/comments.html.tmpl"
        if (! $stash->get(['comment', 0, 'isprivate', 0]) || $stash->get('isinsider')) {
        $output .=  "\n    <div ";
        #line 74 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get(['comment', 0, 'isprivate', 0])) {
        $output .=  ('' . "class=\"bz_private\" ");
        }
        
        #line 75 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get(['marks', 0, $stash->get('count'), 0])) {
        $output .=  ('' . "class=\"bz_comment_hilite\" ");
        }
        
        $output .=  ">";
        #line 105 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get('count') eq $stash->get('description')) {
        $output .=  "\n        <table>\n          <tr>\n            <td align=\"left\">\n              <b><a name=\"c0\" href=\"#c0\">Description</a>:</b>&nbsp;&nbsp;<script \n                type=\"text/javascript\"><!-- \n                  addReplyLink(0);\n                //--></script>\n            </td>\n            <td align=\"left\" width=\"30%\">\n              <b>Opened:</b> ";
        #line 86 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('time')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['bug', 0, 'creation_ts', 0]);
            
            &$filter($output);
        };
        
        $output .=  "\n            </td>\n          </tr>\n        </table>";
        }
        else {
        $output .=  "\n        <br>\n        <span class=\"bz_comment\">\n          <i>Comment\n          <a name=\"c";
        #line 94 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  "\" href=\"#c";
        #line 94 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  "\">#";
        #line 94 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  "</a> From \n          <a href=\"mailto:";
        #line 95 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['comment', 0, 'email', 0]);
            
            &$filter($output);
        };
        
        $output .=  "\">";
        #line 96 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['comment', 0, 'name', 0]);
            
            &$filter($output);
        };
        
        $output .=  "</a>\n          ";
        #line 97 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('time')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['comment', 0, 'time', 0]);
            
            &$filter($output);
        };
        
        $output .=  " \n          </i>";
        #line 102 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get('mode') eq 'edit') {
        $output .=  "\n          <script type=\"text/javascript\"><!-- \n            addReplyLink(";
        #line 101 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  "); //--></script>";
        }
        
        $output .=  "\n          \n        </span>";
        }
        
        $output .=  "\n        ";
        #line 116 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get('mode') eq 'edit' && $stash->get('isinsider')) {
        $output .=  "\n        <i>\n          <input type=\"hidden\" name=\"oisprivate-";
        #line 109 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  "\" \n                 value=\"";
        #line 110 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get(['comment', 0, 'isprivate', 0]);
        $output .=  "\">\n          <input type=\"hidden\" name=\"when-";
        #line 111 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  "\" value=\"";
        #line 111 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get(['comment', 0, 'when', 0]);
        $output .=  "\">\n          <input type=\"checkbox\" name=\"isprivate-";
        #line 112 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  "\" value=\"1\"\n                 id=\"isprivate-";
        #line 113 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  "\"";
        #line 114 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get(['comment', 0, 'isprivate', 0])) {
        $output .=  ('' . " checked=\"checked\"");
        }
        
        $output .=  "> Private\n        </i>";
        }
        
        #line 122 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get(['UserInGroup', [ $stash->get(['Param', [ 'timetrackinggroup' ]]) ]]) && ($stash->get(['comment', 0, 'work_time', 0]) > 0 || $stash->get(['comment', 0, 'work_time', 0]) < 0)) {
        $output .=  "\n         <br>\n         Additional hours worked: ";
        #line 121 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $context->process('formattimeunit', { 'time_unit' => $stash->get(['comment', 0, 'work_time', 0]) });
        }
        
        $output .=  "\n\n";
        #line 131 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get(['comment', 0, 'already_wrapped', 0])) {
        #line 128 "template/en/custom/bug/comments.html.tmpl"
        $stash->set('wrapped_comment', $stash->get(['comment', 0, 'body', 0]));
        }
        else {
        #line 130 "template/en/custom/bug/comments.html.tmpl"
        
        # CAPTURE
        $stash->set('wrapped_comment', do {
            my $output = '';
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('wrap_comment')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['comment', 0, 'body', 0]);
            
            &$filter($output);
        };
        
            $output;
        });
        
        }
        
        $output .=  "\n<pre";
        #line 132 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get('mode') eq 'edit') {
        $output .=  ' id="comment_text_'  . $stash->get('count')  . '"';
        }
        
        $output .=  ">";
        #line 133 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('quoteUrls')
                      || $context->throw($context->error);
        
        $output .=  $stash->get('wrapped_comment');
            
            &$filter($output);
        };
        
        $output .=  "</pre>\n    </div>";
        }
        
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
    },
});
