#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1138010588',
        'name' => 'bug/create/make-template.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n";
    #line 22 "template/en/custom/bug/create/make-template.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
    #line 24 "template/en/custom/bug/create/make-template.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl', { 'title' => 'Bookmarks are your friend', 'h1' => 'Template constructed' });
    $output .=  "\n\n<p>\n  You can bookmark this link:\n  &ldquo;<a href=\"enter_bug.cgi?";
    #line 31 "template/en/custom/bug/create/make-template.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('url');
        
        &$filter($output);
    };
    
    $output .=  "\">";
    #line 31 "template/en/custom/bug/create/make-template.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bug', 0]);
    $output .=  "\n  entry template</a>&rdquo;.\n  This bookmark will bring up the <em>Enter ";
    #line 33 "template/en/custom/bug/create/make-template.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bug', 0]);
    $output .=  "</em> page with the\n  fields initialized as you've requested.\n</p>\n";
    #line 37 "template/en/custom/bug/create/make-template.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
