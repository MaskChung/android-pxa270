#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1138010588',
        'name' => 'admin/fieldvalues/select-field.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n";
    #line 24 "template/en/custom/admin/fieldvalues/select-field.html.tmpl"
    # USE
    $stash->set('Bugzilla',
                $context->plugin('Bugzilla'));
    #line 25 "template/en/custom/admin/fieldvalues/select-field.html.tmpl"
    $stash->set('cgi', $stash->get(['Bugzilla', 0, 'cgi', 0]));
    $output .=  "\n";
    #line 27 "template/en/custom/admin/fieldvalues/select-field.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
    #line 29 "template/en/custom/admin/fieldvalues/select-field.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl', { 'title' => 'Edit values for which field?' });
    $output .=  "\n";
    #line 33 "template/en/custom/admin/fieldvalues/select-field.html.tmpl"
    $stash->set('columns', [ { 'name' => 'name', 'heading' => 'Edit field values for...', 'content_use_field' => 1, 'contentlink' => 'editvalues.cgi?field=%%name%%'  } ]);
    $output .=  "\n";
    #line 43 "template/en/custom/admin/fieldvalues/select-field.html.tmpl"
    $output .=  $context->process('admin/table.html.tmpl', { 'columns' => $stash->get('columns'), 'data' => $stash->get('fields') });
    $output .=  "\n\n<p>\n";
    #line 50 "template/en/custom/admin/fieldvalues/select-field.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
