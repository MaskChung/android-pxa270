#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1138010588',
        'name' => 'whine/multipart-mime.txt.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n";
    #line 32 "template/en/custom/whine/multipart-mime.txt.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n\nFrom: ";
    #line 34 "template/en/custom/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get('from');
    $output .=  "\nTo: ";
    #line 35 "template/en/custom/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get(['recipient', 0, 'email', 0]);
    $output .=  "\nSubject: [";
    #line 36 "template/en/custom/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  "] ";
    #line 36 "template/en/custom/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get('subject');
    $output .=  "\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=\"";
    #line 38 "template/en/custom/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get('boundary');
    $output .=  "\"\n\n\nThis is a MIME multipart message.  It is possible that your mail program\ndoesn't quite handle these properly.  Some or all of the information in this\nmessage may be unreadable.\n\n";
    #line 52 "template/en/custom/whine/multipart-mime.txt.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('alternatives');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'part'} = $value;
    $output .=  "\n\n--";
    #line 48 "template/en/custom/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get('boundary');
    $output .=  "\nContent-type: ";
    #line 49 "template/en/custom/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get(['part', 0, 'type', 0]);
    $output .=  "\n\n";
    #line 51 "template/en/custom/whine/multipart-mime.txt.tmpl"
    $output .=  $stash->get(['part', 0, 'content', 0]);
    $output .=  "\n";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
