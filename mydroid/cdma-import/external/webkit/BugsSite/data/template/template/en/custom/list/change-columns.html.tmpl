#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1138010588',
        'name' => 'list/change-columns.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n";
    #line 22 "template/en/custom/list/change-columns.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
    #line 24 "template/en/custom/list/change-columns.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl', { 'title' => 'Change Columns' });
    $output .=  "\n\n<p>\n  Select the columns you wish to appear in your ";
    #line 29 "template/en/custom/list/change-columns.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " lists. Note that\n  this feature requires cookies to work.\n</p>\n";
    #line 33 "template/en/custom/list/change-columns.html.tmpl"
    $output .=  $context->process('global/field-descs.none.tmpl');
    #line 34 "template/en/custom/list/change-columns.html.tmpl"
    $stash->set(['field_descs', 0, 'short_short_desc', 0], 'Summary (first 60 characters)');
    #line 35 "template/en/custom/list/change-columns.html.tmpl"
    $stash->set(['field_descs', 0, 'short_desc', 0], 'Full Summary');
    #line 36 "template/en/custom/list/change-columns.html.tmpl"
    $stash->set(['field_descs', 0, 'assigned_to_realname', 0], 'Assignee Realname');
    #line 37 "template/en/custom/list/change-columns.html.tmpl"
    $stash->set(['field_descs', 0, 'reporter_realname', 0], 'Reporter Realname');
    #line 38 "template/en/custom/list/change-columns.html.tmpl"
    $stash->set(['field_descs', 0, 'qa_contact_realname', 0], 'QA Contact Realname');
    $output .=  "\n\n<form action=\"colchange.cgi\">\n  <input type=\"hidden\" name=\"rememberedquery\" value=\"";
    #line 41 "template/en/custom/list/change-columns.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('buffer');
        
        &$filter($output);
    };
    
    $output .=  "\">";
    #line 49 "template/en/custom/list/change-columns.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('masterlist');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'column'} = $value;
    $output .=  "\n    <input type=\"checkbox\" id=\"";
    #line 43 "template/en/custom/list/change-columns.html.tmpl"
    $output .=  $stash->get('column');
    $output .=  "\" name=\"column_";
    #line 43 "template/en/custom/list/change-columns.html.tmpl"
    $output .=  $stash->get('column');
    $output .=  "\"";
    #line 44 "template/en/custom/list/change-columns.html.tmpl"
    if ($stash->get(['lsearch', [ $stash->get('collist'), $stash->get('column') ]]) ne -1) {
    $output .=  'checked=\'checked\'';
    }
    
    $output .=  ">\n    <label for=\"";
    #line 45 "template/en/custom/list/change-columns.html.tmpl"
    $output .=  $stash->get('column');
    $output .=  "\">";
    #line 46 "template/en/custom/list/change-columns.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  ($stash->get(['field_descs', 0, $stash->get('column'), 0]) || $stash->get('column'));
        
        &$filter($output);
    };
    
    $output .=  "\n    </label>\n    <br>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n\n  <p>\n    <input id=\"nosplitheader\" type=\"radio\" name=\"splitheader\" value=\"0\"";
    #line 53 "template/en/custom/list/change-columns.html.tmpl"
    if (! $stash->get('splitheader')) {
    $output .=  'checked=\'checked\'';
    }
    
    $output .=  ">\n    <label for=\"nosplitheader\">\n      Normal headers (prettier)\n    </label>\n    <br>\n\n    <input id=\"splitheader\" type=\"radio\" name=\"splitheader\" value=\"1\"";
    #line 60 "template/en/custom/list/change-columns.html.tmpl"
    if ($stash->get('splitheader')) {
    $output .=  'checked=\'checked\'';
    }
    
    $output .=  ">\n    <label for=\"splitheader\">\n      Stagger headers (often makes list more compact)\n    </label>\n  </p>\n\n  <p>\n    <input type=\"submit\" value=\"Change Columns\">\n  </p>\n</form>\n\n<form action=\"colchange.cgi\">\n  <input type=\"hidden\" name=\"rememberedquery\" value=\"";
    #line 72 "template/en/custom/list/change-columns.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('buffer');
        
        &$filter($output);
    };
    
    $output .=  "\">\n  <input type=\"hidden\" name=\"resetit\" value=\"1\">\n  <input type=\"submit\" value=\"Reset to ";
    #line 74 "template/en/custom/list/change-columns.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  " default\">\n</form>\n";
    #line 77 "template/en/custom/list/change-columns.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
