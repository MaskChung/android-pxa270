#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1138010588',
        'name' => 'bug/process/midair.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n\n";
    #line 36 "template/en/custom/bug/process/midair.html.tmpl"
    # USE
    $stash->set('Bugzilla',
                $context->plugin('Bugzilla'));
    #line 37 "template/en/custom/bug/process/midair.html.tmpl"
    $stash->set('cgi', $stash->get(['Bugzilla', 0, 'cgi', 0]));
    $output .=  "\n";
    #line 39 "template/en/custom/bug/process/midair.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
    #line 43 "template/en/custom/bug/process/midair.html.tmpl"
    if (!($stash->get('header_done'))) {
    #line 42 "template/en/custom/bug/process/midair.html.tmpl"
    $output .=  $context->process('bug/process/header.html.tmpl');
    }
    
    $output .=  "\n\n<h1>Mid-air collision detected!</h1>\n\n<p>\n  Someone else has made changes to this ";
    #line 48 "template/en/custom/bug/process/midair.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " at the same time you were trying to.\n  The changes made were:\n</p>\n\n<p>";
    #line 53 "template/en/custom/bug/process/midair.html.tmpl"
    $output .=  $context->process('bug/activity/table.html.tmpl', { 'incomplete_data' => 0 });
    $output .=  "\n</p>\n";
    #line 63 "template/en/custom/bug/process/midair.html.tmpl"
    if ($stash->get(['comments', 0, 'size', 0]) > $stash->get('start_at')) {
    $output .=  "\n<p>\n  Added the comment(s):\n  <blockquote>";
    #line 60 "template/en/custom/bug/process/midair.html.tmpl"
    $output .=  $context->process('bug/comments.html.tmpl');
    $output .=  "\n  </blockquote>\n</p>";
    }
    
    $output .=  "\n\n<p>\n  Your comment was:<br>\n  <blockquote><pre>";
    #line 67 "template/en/custom/bug/process/midair.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['cgi', 0, 'param', [ 'comment' ]]);
        
        &$filter($output);
    };
    
    $output .=  "</pre></blockquote>\n</p>\n\n<p>\nYou have the following choices:\n</p>\n\n<ul>\n  <li>\n    <form method=\"post\" action=\"process_bug.cgi\">";
    #line 77 "template/en/custom/bug/process/midair.html.tmpl"
    $output .=  $context->process('global/hidden-fields.html.tmpl', { 'exclude' => ('' . "^Bugzilla_(login|password)") });
    $output .=  "\n      <input type=\"submit\" value=\"Submit my changes anyway\">\n        This will cause all of the above changes to be overwritten";
    #line 80 "template/en/custom/bug/process/midair.html.tmpl"
    if ($stash->get(['comments', 0, 'size', 0]) > $stash->get('start_at')) {
    $output .=  ', except for the added comment(s)';
    }
    
    $output .=  ".\n    </form>\n  </li>\n  <li>\n    <a href=\"show_bug.cgi?id=";
    #line 84 "template/en/custom/bug/process/midair.html.tmpl"
    $output .=  $stash->get('bug_id');
    $output .=  "\">Throw away my changes,\n      and revisit ";
    #line 85 "template/en/custom/bug/process/midair.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " ";
    #line 85 "template/en/custom/bug/process/midair.html.tmpl"
    $output .=  $stash->get('bug_id');
    $output .=  "</a>\n  </li>\n</ul>\n";
    #line 89 "template/en/custom/bug/process/midair.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
