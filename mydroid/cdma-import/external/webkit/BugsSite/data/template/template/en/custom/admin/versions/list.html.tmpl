#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1138010588',
        'name' => 'admin/versions/list.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n";
    #line 29 "template/en/custom/admin/versions/list.html.tmpl"
    # USE
    $stash->set('Bugzilla',
                $context->plugin('Bugzilla'));
    #line 30 "template/en/custom/admin/versions/list.html.tmpl"
    $stash->set('cgi', $stash->get(['Bugzilla', 0, 'cgi', 0]));
    $output .=  "\n";
    #line 32 "template/en/custom/admin/versions/list.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
    #line 35 "template/en/custom/admin/versions/list.html.tmpl"
    
    # CAPTURE
    $stash->set('title', do {
        my $output = '';
    $output .=  "Select version of product\n                   '";
    #line 35 "template/en/custom/admin/versions/list.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('product');
        
        &$filter($output);
    };
    
    $output .=  "'";
        $output;
    });
    
    #line 36 "template/en/custom/admin/versions/list.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl', { 'title' => $stash->get('title') });
    $output .=  "\n";
    #line 41 "template/en/custom/admin/versions/list.html.tmpl"
    
    # CAPTURE
    $stash->set('edit_contentlink', do {
        my $output = '';
    $output .=  "editversions.cgi?action=edit&amp;product=";
    #line 41 "template/en/custom/admin/versions/list.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('url_quote')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('product');
        
        &$filter($output);
    };
    
    $output .=  "&amp;version=%%name%%";
        $output;
    });
    
    #line 43 "template/en/custom/admin/versions/list.html.tmpl"
    
    # CAPTURE
    $stash->set('delete_contentlink', do {
        my $output = '';
    $output .=  "editversions.cgi?action=del&amp;product=";
    #line 43 "template/en/custom/admin/versions/list.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('url_quote')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('product');
        
        &$filter($output);
    };
    
    $output .=  "&amp;version=%%name%%";
        $output;
    });
    
    $output .=  "\n\n";
    #line 46 "template/en/custom/admin/versions/list.html.tmpl"
    $stash->set('columns', [ { 'name' => 'name', 'heading' => 'Edit version...', 'contentlink' => $stash->get('edit_contentlink')  }, { 'heading' => 'Action', 'content' => 'Delete', 'contentlink' => $stash->get('delete_contentlink')  } ]);
    $output .=  "\n";
    #line 60 "template/en/custom/admin/versions/list.html.tmpl"
    $output .=  $context->process('admin/table.html.tmpl', { 'columns' => $stash->get('columns'), 'data' => $stash->get('versions') });
    $output .=  "\n\n<p>\n";
    #line 67 "template/en/custom/admin/versions/list.html.tmpl"
    $output .=  $context->process('admin/versions/footer.html.tmpl', { 'no_edit_other_versions_link' => 1 });
    $output .=  "\n";
    #line 71 "template/en/custom/admin/versions/list.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
