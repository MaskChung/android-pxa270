#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1149750175',
        'name' => 'attachment/create.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n";
    #line 22 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n\n";
    #line 25 "template/en/custom/attachment/create.html.tmpl"
    
    # CAPTURE
    $stash->set('title', do {
        my $output = '';
    $output .=  "Create New Attachment for ";
    #line 25 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bug', 0]);
    $output .=  " #";
    #line 25 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $stash->get('bugid');
        $output;
    });
    
    #line 27 "template/en/custom/attachment/create.html.tmpl"
    
    # CAPTURE
    $stash->set('h1', do {
        my $output = '';
    $output .=  "Create New Attachment for\n  ";
    #line 0 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $stash->get(['GetBugLink', [ $stash->get('bugid'), ($stash->get(['terms', 0, 'Bug', 0]) . " " . $stash->get('bugid')) ]]);
        $output;
    });
    
    #line 28 "template/en/custom/attachment/create.html.tmpl"
    
    # CAPTURE
    $stash->set('h2', do {
        my $output = '';
    #line 28 "template/en/custom/attachment/create.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('bugsummary');
        
        &$filter($output);
    };
    
        $output;
    });
    
    $output .=  "\n";
    #line 30 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl', { 'title' => $stash->get('title'), 'h1' => $stash->get('h1'), 'h2' => $stash->get('h2'), 'style' => '
        table.attachment_entry th {
          text-align: right;
          vertical-align: baseline;
          white-space: nowrap;
        }
    
        table.attachment_entry td {
          text-align: left;
          vertical-align: baseline;
          padding-bottom: 5px;
        }
        
        table#flags th, table#flags td {
          text-align: left;
          vertical-align: baseline;
          font-size: small;
        }
      ', 'onload' => 'setContentTypeDisabledState();' });
    $output .=  "\n\n<form name=\"entryform\" method=\"post\" action=\"attachment.cgi\" enctype=\"multipart/form-data\">\n  <input type=\"hidden\" name=\"bugid\" value=\"";
    #line 57 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $stash->get('bugid');
    $output .=  "\">\n  <input type=\"hidden\" name=\"action\" value=\"insert\">\n\n  <table class=\"attachment_entry\">\n    <tr>\n      <th><label for=\"data\">File:</label></th>\n      <td>\n        <em>Enter the path to the file on your computer.</em><br>\n        <input type=\"file\" id=\"data\" name=\"data\" size=\"50\">\n      </td>\n    </tr>";
    #line 79 "template/en/custom/attachment/create.html.tmpl"
    if ($stash->get(['Param', [ 'maxlocalattachment' ]])) {
    $output .=  "\n    <tr>\n      <th>BigFile:</th>\n      <td>\n        <input type=\"checkbox\" id=\"bigfile\"\n               name=\"bigfile\" value=\"bigfile\">\n        <label for=\"bigfile\">\n          Big File - Stored locally and may be purged\n        </label>\n      </td>\n    </tr>";
    }
    
    $output .=  "\n    <tr>\n      <th><label for=\"description\">Description:</label></th>\n      <td>\n        <em>Describe the attachment briefly.</em><br>\n        <input type=\"text\" id=\"description\" name=\"description\" size=\"60\" maxlength=\"200\">\n      </td>\n    </tr>\n    <tr>\n      <th></th>\n      <td>\n      </td>\n    </tr>\n    <tr>\n      <th>Content Type:</th>\n      <td>\n        <em>If the attachment is a patch, check the box below.</em><br>\n        <input type=\"checkbox\" id=\"ispatch\" name=\"ispatch\" value=\"1\"\n               onchange=\"setContentTypeDisabledState();\">\n        <label for=\"ispatch\">patch</label><br><br>\n\n        <em>Otherwise, choose a method for determining the content type.</em><br>\n        <input type=\"radio\" id=\"autodetect\"\n               name=\"contenttypemethod\" value=\"autodetect\">\n          <label for=\"autodetect\">auto-detect</label><br>\n        <input type=\"radio\" id=\"list\"\n               name=\"contenttypemethod\" value=\"list\">\n          <label for=\"list\">select from list:</label>\n          <select name=\"contenttypeselection\"\n                  onchange=\"this.form.contenttypemethod[1].checked = true;\">";
    #line 109 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $context->process('attachment/content-types.html.tmpl');
    $output .=  "\n          </select><br>\n        <input type=\"radio\" id=\"manual\"\n                     name=\"contenttypemethod\" value=\"manual\">\n          <label for=\"manual\">enter manually:</label>\n          <input type=\"text\" name=\"contenttypeentry\" size=\"30\" maxlength=\"200\"\n                 onchange=\"if (this.value) this.form.contenttypemethod[2].checked = true;\">\n      </td>\n    </tr>";
    #line 127 "template/en/custom/attachment/create.html.tmpl"
    if (($stash->get(['Param', [ 'insidergroup' ]]) && $stash->get(['UserInGroup', [ $stash->get(['Param', [ 'insidergroup' ]]) ]]))) {
    $output .=  "\n      <tr>\n        <th>Privacy:</th>\n        <td>\n          <em>If the attachment is private, check the box below.</em><br>\n          <input type=\"checkbox\" name=\"isprivate\" id=\"isprivate\" value=\"1\">\n        <label for=\"isprivate\">Private</label>\n        </td>\n      </tr>";
    }
    
    $output .=  "\n    <tr>\n      <th>Obsoletes:</th>\n      <td>\n        <em>(optional) Check each existing attachment made obsolete by your new attachment.</em><br>";
    #line 143 "template/en/custom/attachment/create.html.tmpl"
    if ($stash->get(['attachments', 0, 'size', 0])) {
    #line 140 "template/en/custom/attachment/create.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('attachments');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'attachment'} = $value;
    #line 139 "template/en/custom/attachment/create.html.tmpl"
    if ((($stash->get(['attachment', 0, 'isprivate', 0]) eq 0) || ($stash->get(['Param', [ 'insidergroup' ]]) && $stash->get(['UserInGroup', [ $stash->get(['Param', [ 'insidergroup' ]]) ]])))) {
    $output .=  "\n              <input type=\"checkbox\" id=\"";
    #line 136 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $stash->get(['attachment', 0, 'id', 0]);
    $output .=  "\"\n                   name=\"obsolete\" value=\"";
    #line 137 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $stash->get(['attachment', 0, 'id', 0]);
    $output .=  "\">\n              <a href=\"attachment.cgi?id=";
    #line 138 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $stash->get(['attachment', 0, 'id', 0]);
    $output .=  "&amp;action=edit\">";
    #line 138 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $stash->get(['attachment', 0, 'id', 0]);
    $output .=  ": ";
    #line 138 "template/en/custom/attachment/create.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['attachment', 0, 'description', 0]);
        
        &$filter($output);
    };
    
    $output .=  "</a><br>";
    }
    ;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    }
    else {
    $output .=  "\n            [no attachments can be made obsolete]";
    }
    
    $output .=  "\n      </td>\n    </tr>\n";
    #line 157 "template/en/custom/attachment/create.html.tmpl"
    if (($stash->get(['user', 0, 'id', 0]) ne $stash->get('bugassignee_id')) && $stash->get(['user', 0, 'groups', 0, 'editbugs', 0])) {
    $output .=  "\n      <tr>\n        <th>Reassignment:</th>\n        <td>\n          <em>If you want to assign this ";
    #line 151 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " to yourself,\n              check the box below.</em><br>\n          <input type=\"checkbox\" id=\"takebug\" name=\"takebug\" value=\"1\">\n          <label for=\"takebug\">take ";
    #line 154 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  "</label>\n        </td>\n      </tr>";
    }
    
    $output .=  "\n    <tr>\n      <td> </td>\n      <td>";
    #line 163 "template/en/custom/attachment/create.html.tmpl"
    if ($stash->get(['flag_types', 0, 'size', 0]) > 0) {
    #line 162 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $context->process('flag/list.html.tmpl', { 'bug_id' => $stash->get('bugid'), 'attach_id' => $stash->get('attachid') });
    $output .=  "<br>";
    }
    
    $output .=  "\n      </td>\n    </tr>\n    <tr>\n      <th><label for=\"comment\">Comment:</label></th>\n      <td>\n        <em>(optional) Add a comment about this attachment to the ";
    #line 169 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  ".</em><br>\n        <textarea wrap=\"soft\" id=\"commment\" name=\"comment\" rows=\"6\" cols=\"80\"></textarea>\n      </td>\n    </tr>";
    #line 188 "template/en/custom/attachment/create.html.tmpl"
    if ($stash->get(['bug', 0, 'product', 0]) eq 'WebKit') {
    $output .=  " \n<tr id=\"legal\" style=\"visibility: collapse;\">\n     <th>Legal:</th>\n     <td>\n<b>WebKit Contribution Terms:</b><br/>\n<br/>\nHello and thank you for contributing a patch.  Here is our licensing policy and terms for contributing code to the WebKit project.<br/>\n<br/>\n<ol>\n<li>If you are sending in a patch to existing WebKit code, you agree by clicking below that your changes are licensed under the existing license terms of the file you are modifying (i.e., BSD license or GNU Lesser General Public License v.2.1, LGPL v. 2.1).  Please also add your copyright (name and year) to the relevant files for changes that are more than 10 lines of code.</li>\n<li>If you are sending in a new file for inclusion in WebKit (no code copied from another source), the preferred license is BSD, but LGPL 2.1 is an option as well.  Please include your copyright (name and year) and license preference (BSD or LGPL 2.1).  By clicking below you agree that your file is licensed under either the BSD license or LGPL 2.1, as indicated in your file.</li>\n<li>If you aren't the author of the patch, you agree to include the original copyright notices and licensing terms with it, to the extent that they exist.  If there wasn't a copyright notice or license, please make a note of it.  Generally we can only take in patches that are BSD- or LGPL-licensed in order to maintain license compatibility within the project.</li>\n</ol>\n     </td>\n    </tr>";
    }
    
    $output .=  "\n    <tr>\n      <th>&nbsp;</th>\n      <td><input type=\"submit\" id=\"submit\" value=\"Submit\"></td>\n    </tr>\n  </table>\n\n</form>\n\n<script type=\"text/javascript\">\n  <!--\n  function setContentTypeDisabledState()\n  {\n    var entryform = document.entryform;\n\n    var isdisabled = false;\n    if (entryform.ispatch.checked)\n      isdisabled = true;\n\n    for (var i=0 ; i<entryform.contenttypemethod.length ; i++)\n      entryform.contenttypemethod[i].disabled = isdisabled;\n\n    entryform.contenttypeselection.disabled = isdisabled;\n    entryform.contenttypeentry.disabled = isdisabled;\n\n    if (isdisabled) {\n      document.getElementById('legal').style.visibility = \"visible\";\n      document.getElementById('submit').value = \"Agree and Submit\";\n    } else {\n      document.getElementById('submit').value = \"Submit\";\n      document.getElementById('legal').style.visibility = \"collapse\";\n   }\n  }\n\n  //-->\n</script>\n";
    #line 225 "template/en/custom/attachment/create.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
