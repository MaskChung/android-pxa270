#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1138010588',
        'name' => 'request/queue.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n";
    #line 22 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
    #line 24 "template/en/custom/request/queue.html.tmpl"
    # USE
    $stash->set('Bugzilla',
                $context->plugin('Bugzilla'));
    #line 25 "template/en/custom/request/queue.html.tmpl"
    $stash->set('cgi', $stash->get(['Bugzilla', 0, 'cgi', 0]));
    $output .=  "\n\n";
    #line 37 "template/en/custom/request/queue.html.tmpl"
    
    # CAPTURE
    $stash->set('javascript', do {
        my $output = '';
    $output .=  "\n  var usetms = 0; // do we have target milestone?\n  var first_load = 1; // is this the first time we load the page?\n  var last_sel = []; // caches last selection\n  var cpts = new Array();";
    #line 36 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('products');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'p'} = $value;
    $output .=  "\n    cpts['";
    #line 34 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('p');
        
        &$filter($output);
    };
    
    $output .=  "'] = [";
    #line 35 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get(['components_by_product', 0, $stash->get('p'), 0]);
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'item'} = $value;
    $output .=  "'";
    #line 35 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "'";
    #line 35 "template/en/custom/request/queue.html.tmpl"
    if (!($stash->get(['loop', 0, 'last', 0]))) {
    $output .=  ', ';
    }
    ;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  " ];";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
        $output;
    });
    
    $output .=  "\n";
    #line 39 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl', { 'title' => 'Request Queue', 'style' => '
        table.requests th { text-align: left; }
        table#filter th { text-align: right; }
      ', 'onload' => 'selectProduct(document.forms[0], \'product\', \'component\', \'Any\');', 'javascript_urls' => [ 'productmenu.js' ] });
    $output .=  "\n\n<form action=\"request.cgi\" method=\"get\">\n  <input type=\"hidden\" name=\"action\" value=\"queue\">\n\n  <table id=\"filter\">\n    <tr>\n      <th>Requester:</th>\n      <td><input type=\"text\" name=\"requester\" value=\"";
    #line 55 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['cgi', 0, 'param', [ 'requester' ]]);
        
        &$filter($output);
    };
    
    $output .=  "\" size=\"20\" \n           title=\"Requester's email address\"></td>\n      <th>Product:</th>\n      <td>\n        <select name=\"product\" onchange=\"selectProduct(this.form, 'product', 'component', 'Any');\">\n          <option value=\"\">Any</option>";
    #line 64 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('products');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'item'} = $value;
    $output .=  "\n            <option value=\"";
    #line 62 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "\"";
    #line 63 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get(['cgi', 0, 'param', [ 'product' ]]) eq $stash->get('item')) {
    $output .=  'selected';
    }
    
    $output .=  ">";
    #line 63 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "</option>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n        </select>\n      </td>\n      <th>Flag:</th>\n      <td>";
    #line 69 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('global/select-menu.html.tmpl', { 'name' => 'type', 'options' => $stash->get('types'), 'default' => $stash->get(['cgi', 0, 'param', [ 'type' ]]) });
    $output .=  "\n      </td>\n\n      ";
    $output .=  "\n      <!--\n      <th>Status:</th>\n      <td>\n        ";
    $output .=  "\n      </td>\n      -->\n\n    </tr>\n    <tr>\n      <th>Requestee:</th>\n      <td><input type=\"text\" name=\"requestee\" value=\"";
    #line 89 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['cgi', 0, 'param', [ 'requestee' ]]);
        
        &$filter($output);
    };
    
    $output .=  "\" size=\"20\" \n           title=\"Requestee's email address or &quot;-&quot; (hyphen) for requests with no requestee\"></td>\n      <th>Component:</th>\n      <td>\n        <select name=\"component\">\n          <option value=\"\">Any</option>";
    #line 98 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('components');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'item'} = $value;
    $output .=  "\n            <option value=\"";
    #line 96 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "\" ";
    #line 96 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get(['cgi', 0, 'param', [ 'component' ]]) eq $stash->get('item')) {
    $output .=  'selected';
    }
    
    $output .=  ">";
    #line 97 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "</option>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n        </select>\n      </td>\n      <th>Group By:</th>\n      <td>";
    #line 103 "template/en/custom/request/queue.html.tmpl"
    $stash->set('groups', { 'Requester' => 'requester', 'Requestee' => 'requestee', 'Flag' => 'type', 'Product/Component' => 'category'  });
    #line 109 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('global/select-menu.html.tmpl', { 'name' => 'group', 'options' => $stash->get('groups'), 'default' => $stash->get(['cgi', 0, 'param', [ 'group' ]]) });
    $output .=  "\n      </td>\n      <td><input type=\"submit\" value=\"Filter\"></td>\n    </tr>\n  </table>\n\n</form>\n";
    #line 0 "template/en/custom/request/queue.html.tmpl"
    $stash->set('column_headers', { 'type' => 'Flag', 'status' => 'Status', 'bug' => ('' . $stash->get(['terms', 0, 'Bug', 0])), 'attachment' => 'Attachment', 'requester' => 'Requester', 'requestee' => 'Requestee', 'created' => 'Created', 'category' => 'Product/Component'  });
    $output .=  "\n";
    #line 127 "template/en/custom/request/queue.html.tmpl"
    $stash->set('display_columns', [ 'requester', 'requestee', 'type', 'bug', 'attachment', 'created' ], 1);
    $stash->set('group_field', 'Requestee', 1);
    $stash->set('group_value', '', 1);
    $output .=  "\n";
    #line 134 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get('debug')) {
    $output .=  "\n  <p>";
    #line 133 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('query');
        
        &$filter($output);
    };
    
    $output .=  "</p>";
    }
    
    $output .=  "\n";
    #line 158 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get(['requests', 0, 'size', 0]) eq 0) {
    $output .=  "\n  <p>\n    No requests.\n  </p>";
    }
    else {
    #line 156 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('requests');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'request'} = $value;
    #line 142 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get(['loop', 0, 'first', 0])) {
    #line 142 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('start_new_table');
    }
    
    #line 149 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get(['request', 0, $stash->get('group_field'), 0]) ne $stash->get('group_value')) {
    #line 144 "template/en/custom/request/queue.html.tmpl"
    $stash->set('group_value', $stash->get(['request', 0, $stash->get('group_field'), 0]));
    #line 148 "template/en/custom/request/queue.html.tmpl"
    if (!($stash->get(['loop', 0, 'first', 0]))) {
    $output .=  "\n        </table>";
    #line 147 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('start_new_table');
    }
    
    }
    
    $output .=  "\n    <tr>";
    #line 154 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('display_columns');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'column'} = $value;
    #line 152 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get('column') eq $stash->get('group_field') || $stash->get(['excluded_columns', 0, 'contains', [ $stash->get('column') ]])) {
    ($value, $error) = $list->get_next();
    next LOOP;
    
    }
    
    $output .=  "\n        <td>";
    #line 0 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process(("display_" . $stash->get('column')));
    $output .=  "</td>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n    </tr>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n  </table>";
    }
    
    $output .=  "\n";
    #line 160 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'display_type' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        #line 174 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['request', 0, 'type', 0]);
            
            &$filter($output);
        };
        
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
        'start_new_table' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        $output .=  "\n  <h3>";
        #line 163 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['column_headers', 0, $stash->get('group_field'), 0]);
        $output .=  ": ";
        #line 163 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  ($stash->get(['request', 0, $stash->get('group_field'), 0]) || 'None');
            
            &$filter($output);
        };
        
        $output .=  "</h3>\n  <table class=\"requests\" cellspacing=\"0\" cellpadding=\"4\" border=\"1\">\n    <tr>";
        #line 169 "template/en/custom/request/queue.html.tmpl"
        
        # FOREACH 
        do {
            my ($value, $error, $oldloop);
            my $list = $stash->get('display_columns');
            
            unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
                $list = Template::Config->iterator($list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($value, $error) = $list->get_first();
            eval { $oldloop = $stash->get('loop') };
            $stash->set('loop', $list);
            eval {
        LOOP:   while (! $error) {
                    $stash->{'column'} = $value;
        #line 167 "template/en/custom/request/queue.html.tmpl"
        if ($stash->get('column') eq $stash->get('group_field') || $stash->get(['excluded_columns', 0, 'contains', [ $stash->get('column') ]])) {
        ($value, $error) = $list->get_next();
        next LOOP;
        
        }
        
        $output .=  "\n        <th>";
        #line 168 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['column_headers', 0, $stash->get('column'), 0]);
        $output .=  "</th>";;
                    ($value, $error) = $list->get_next();
                }
            };
            $stash->set('loop', $oldloop);
            die $@ if $@;
            $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
            die $error if $error;
        };
        
        $output .=  "\n    </tr>";
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
        'display_bug' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        $output .=  "\n  <a href=\"show_bug.cgi?id=";
        #line 182 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['request', 0, 'bug_id', 0]);
        $output .=  "\">";
        #line 183 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['request', 0, 'bug_id', 0]);
        $output .=  ": ";
        #line 183 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['request', 0, 'bug_summary', 0]);
            
            &$filter($output);
        };
        
        $output .=  "</a>";
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
        'display_status' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        #line 178 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['request', 0, 'status', 0]);
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
        'display_requester' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        #line 200 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['request', 0, 'requester', 0]);
            
            &$filter($output);
        };
        
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
        'display_attachment' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        #line 192 "template/en/custom/request/queue.html.tmpl"
        if ($stash->get(['request', 0, 'attach_id', 0])) {
        $output .=  "\n    <a href=\"attachment.cgi?id=";
        #line 188 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['request', 0, 'attach_id', 0]);
        $output .=  "&amp;action=edit\">";
        #line 189 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['request', 0, 'attach_id', 0]);
        $output .=  ": ";
        #line 189 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['request', 0, 'attach_summary', 0]);
            
            &$filter($output);
        };
        
        $output .=  "</a>";
        }
        else {
        $output .=  "\n    N/A";
        }
        
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
        'display_requestee' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        #line 196 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['request', 0, 'requestee', 0]);
            
            &$filter($output);
        };
        
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
        'display_created' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $error;
            
            eval { BLOCK: {
        #line 204 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $filter = $context->filter('time')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['request', 0, 'created', 0]);
            
            &$filter($output);
        };
        
            } };
            if ($@) {
                $error = $context->catch($@, \$output);
                die $error unless $error->type eq 'return';
            }
        
            return $output;
        },
    },
});
