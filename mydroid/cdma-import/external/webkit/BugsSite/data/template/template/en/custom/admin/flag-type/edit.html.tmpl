#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1138010588',
        'name' => 'admin/flag-type/edit.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n";
    #line 22 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n\n";
    #line 34 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('javascript', do {
        my $output = '';
    $output .=  "\n  var usetms = 0; // do we have target milestone?\n  var first_load = 1; // is this the first time we load the page?\n  var last_sel = []; // caches last selection\n  var cpts = new Array();";
    #line 33 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('products');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'p'} = $value;
    $output .=  "\n    cpts['";
    #line 31 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('p');
        
        &$filter($output);
    };
    
    $output .=  "'] = [";
    #line 32 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get(['components_by_product', 0, $stash->get('p'), 0]);
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'item'} = $value;
    $output .=  "'";
    #line 32 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "'";
    #line 32 "template/en/custom/admin/flag-type/edit.html.tmpl"
    if (!($stash->get(['loop', 0, 'last', 0]))) {
    $output .=  ', ';
    }
    ;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  " ];";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
        $output;
    });
    
    $output .=  "\n";
    #line 44 "template/en/custom/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'target_type', 0]) eq 'bug') {
    #line 37 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('title', do {
        my $output = '';
    $output .=  "Create Flag Type for ";
    #line 37 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugs', 0]);
        $output;
    });
    
    #line 38 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('typeLabelLowerPlural', do {
        my $output = '';
    #line 38 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
        $output;
    });
    
    #line 39 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('typeLabelLowerSingular', do {
        my $output = '';
    #line 39 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
        $output;
    });
    
    }
    else {
    #line 41 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $stash->set('title', 'Create Flag Type for Attachments');
    #line 42 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('typeLabelLowerPlural', do {
        my $output = '';
    $output .=  "attachments";
        $output;
    });
    
    #line 43 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # CAPTURE
    $stash->set('typeLabelLowerSingular', do {
        my $output = '';
    $output .=  "attachment";
        $output;
    });
    
    }
    
    $output .=  "\n";
    #line 50 "template/en/custom/admin/flag-type/edit.html.tmpl"
    if ($stash->get('last_action') eq 'copy') {
    #line 0 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $stash->set('title', ("Create Flag Type Based on " . $stash->get(['type', 0, 'name', 0])));
    }
    elsif ($stash->get('last_action') eq 'edit') {
    #line 0 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $stash->set('title', ("Edit Flag Type " . $stash->get(['type', 0, 'name', 0])));
    }
    
    $output .=  "\n";
    #line 52 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl', { 'title' => $stash->get('title'), 'style' => '
        table#form th { text-align: right; vertical-align: baseline; white-space: nowrap; }
        table#form td { text-align: left; vertical-align: baseline; }
      ', 'onload' => 'selectProduct(document.forms[0], \'product\', \'component\', \'__Any__\');', 'javascript_urls' => [ 'productmenu.js' ] });
    $output .=  "\n\n<form method=\"post\" action=\"editflagtypes.cgi\">\n  <input type=\"hidden\" name=\"action\" value=\"";
    #line 63 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get('action');
    $output .=  "\">\n  <input type=\"hidden\" name=\"id\" value=\"";
    #line 64 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['type', 0, 'id', 0]);
    $output .=  "\">\n  <input type=\"hidden\" name=\"target_type\" value=\"";
    #line 65 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['type', 0, 'target_type', 0]);
    $output .=  "\">";
    #line 68 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get(['type', 0, 'inclusions', 0]);
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'category'} = $value;
    $output .=  "\n    <input type=\"hidden\" name=\"inclusions\" value=\"";
    #line 67 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['category', 0, 'value', 0]);
        
        &$filter($output);
    };
    
    $output .=  "\">";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    #line 71 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get(['type', 0, 'exclusions', 0]);
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'category'} = $value;
    $output .=  "\n    <input type=\"hidden\" name=\"exclusions\" value=\"";
    #line 70 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['category', 0, 'value', 0]);
        
        &$filter($output);
    };
    
    $output .=  "\">";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n\n  <table id=\"form\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\">\n    <tr>\n      <th>Name:</th>\n      <td>\n        a short name identifying this type<br>\n        <input type=\"text\" name=\"name\" value=\"";
    #line 78 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['type', 0, 'name', 0]);
        
        &$filter($output);
    };
    
    $output .=  "\"\n               size=\"50\" maxlength=\"50\">\n      </td>\n    </tr>\n\n    <tr>\n      <th>Description:</th>\n      <td>\n        a comprehensive description of this type<br>\n        <textarea name=\"description\" rows=\"4\" cols=\"80\">";
    #line 87 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['type', 0, 'description', 0]);
        
        &$filter($output);
    };
    
    $output .=  "</textarea>\n      </td>\n    </tr>\n\n    <tr>\n      <th>Category:</th>\n\n      <td>\n        the products/components to which ";
    #line 95 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get('typeLabelLowerPlural');
    $output .=  " must\n        (inclusions) or must not (exclusions) belong in order for users\n        to be able to set flags of this type for them\n        <table>\n          <tr>\n            <td style=\"vertical-align: top;\">\n              <b>Product/Component:</b><br>\n              <select name=\"product\" onchange=\"selectProduct(this.form, 'product', 'component', '__Any__');\">\n                <option value=\"\">__Any__</option>";
    #line 108 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('products');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'item'} = $value;
    $output .=  "\n                  <option value=\"";
    #line 105 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "\" ";
    #line 106 "template/en/custom/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'product', 0, 'name', 0]) eq $stash->get('item')) {
    $output .=  'selected';
    }
    
    $output .=  ">";
    #line 107 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "</option>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n              </select><br>\n              <select name=\"component\">\n                <option value=\"\">__Any__</option>";
    #line 116 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FOREACH 
    do {
        my ($value, $error, $oldloop);
        my $list = $stash->get('components');
        
        unless (UNIVERSAL::isa($list, 'Template::Iterator')) {
            $list = Template::Config->iterator($list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($value, $error) = $list->get_first();
        eval { $oldloop = $stash->get('loop') };
        $stash->set('loop', $list);
        eval {
    LOOP:   while (! $error) {
                $stash->{'item'} = $value;
    $output .=  "\n                  <option value=\"";
    #line 113 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "\" ";
    #line 114 "template/en/custom/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'component', 0, 'name', 0]) eq $stash->get('item')) {
    $output .=  'selected';
    }
    
    $output .=  ">";
    #line 115 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('item');
        
        &$filter($output);
    };
    
    $output .=  "</option>";;
                ($value, $error) = $list->get_next();
            }
        };
        $stash->set('loop', $oldloop);
        die $@ if $@;
        $error = 0 if $error && $error eq Template::Constants::STATUS_DONE;
        die $error if $error;
    };
    
    $output .=  "\n              </select><br>\n              <input type=\"submit\" name=\"categoryAction-include\" value=\"Include\">\n              <input type=\"submit\" name=\"categoryAction-exclude\" value=\"Exclude\">\n            </td>\n            <td style=\"vertical-align: top;\">\n              <b>Inclusions:</b><br>";
    #line 123 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('global/select-menu.html.tmpl', { 'name' => 'inclusion_to_remove', 'multiple' => '1', 'size' => '4', 'options' => $stash->get(['type', 0, 'inclusions', 0]) });
    $output .=  "<br>\n              <input type=\"submit\" name=\"categoryAction-removeInclusion\" value=\"Remove Inclusion\">\n            </td>\n            <td style=\"vertical-align: top;\">\n              <b>Exclusions:</b><br>";
    #line 128 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('global/select-menu.html.tmpl', { 'name' => 'exclusion_to_remove', 'multiple' => '1', 'size' => '4', 'options' => $stash->get(['type', 0, 'exclusions', 0]) });
    $output .=  "<br>\n              <input type=\"submit\" name=\"categoryAction-removeExclusion\" value=\"Remove Exclusion\">\n            </td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n\n    <tr>\n      <th>Sort Key:</th>\n      <td>\n        a number between 1 and 32767 by which this type will be sorted\n        when displayed to users in a list; ignore if you don't care\n        what order the types appear in or if you want them to appear\n        in alphabetical order<br>\n        <input type=\"text\" name=\"sortkey\" value=\"";
    #line 143 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['type', 0, 'sortkey', 0]) || 1;
    $output .=  "\" size=\"5\" maxlength=\"5\">\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"checkbox\" name=\"is_active\" ";
    #line 150 "template/en/custom/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'is_active', 0]) || ! $stash->get(['type', 0, 'is_active', 0, 'defined', 0])) {
    $output .=  'checked';
    }
    
    $output .=  ">\n        active (flags of this type appear in the UI and can be set)\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"checkbox\" name=\"is_requestable\" ";
    #line 158 "template/en/custom/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'is_requestable', 0]) || ! $stash->get(['type', 0, 'is_requestable', 0, 'defined', 0])) {
    $output .=  'checked';
    }
    
    $output .=  ">\n        requestable (users can ask for flags of this type to be set)\n      </td>\n    </tr>\n\n    <tr>\n      <th>CC List:</th>\n      <td>\n        if requestable, who should get carbon copied on email notification of requests.\n        This is a comma-separated list of full e-mail addresses which do not\n        need to be ";
    #line 168 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  " logins.";
    #line 173 "template/en/custom/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['Param', [ 'emailsuffix' ]])) {
    $output .=  "\n          Note that the configured emailsuffix\n          <kbd>";
    #line 171 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get(['Param', [ 'emailsuffix' ]]);
    $output .=  "</kbd> will <em>not</em> be appended\n          to these addresses, so you should add it explicitly if so desired.";
    }
    
    $output .=  "<br>\n        <input type=\"text\" name=\"cc_list\" value=\"";
    #line 174 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['type', 0, 'cc_list', 0]);
        
        &$filter($output);
    };
    
    $output .=  "\" size=\"80\" maxlength=\"200\">\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"checkbox\" name=\"is_requesteeble\" ";
    #line 181 "template/en/custom/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'is_requesteeble', 0]) || ! $stash->get(['type', 0, 'is_requesteeble', 0, 'defined', 0])) {
    $output .=  'checked';
    }
    
    $output .=  ">\n        specifically requestable (users can ask specific other users to set flags of this type as opposed to just asking the wind)\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"checkbox\" name=\"is_multiplicable\" ";
    #line 189 "template/en/custom/admin/flag-type/edit.html.tmpl"
    if ($stash->get(['type', 0, 'is_multiplicable', 0]) || ! $stash->get(['type', 0, 'is_multiplicable', 0, 'defined', 0])) {
    $output .=  'checked';
    }
    
    $output .=  ">\n        multiplicable (multiple flags of this type can be set on the same ";
    #line 190 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $stash->get('typeLabelLowerSingular');
    $output .=  ")\n      </td>\n    </tr>\n\n    <tr>\n      <th>Grant Group:</th>\n      <td>\n        the group allowed to grant/deny flags of this type\n        (to allow all users to grant/deny these flags, leave this empty)<br>\n        <input type=\"text\" name=\"grant_gid\" value=\"";
    #line 199 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['type', 0, 'grant_gid', 0]);
        
        &$filter($output);
    };
    
    $output .=  "\" size=\"50\" maxlength=\"255\">\n      </td>\n    </tr>\n\n    <tr>\n      <th>Request Group:</th>\n      <td>\n        if flags of this type are requestable, the group allowed to request them\n        (to allow all users to request these flags, leave this empty)<br>\n        Note that the request group alone has no effect if the grant group is not defined!<br>\n        <input type=\"text\" name=\"request_gid\" value=\"";
    #line 209 "template/en/custom/admin/flag-type/edit.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['type', 0, 'request_gid', 0]);
        
        &$filter($output);
    };
    
    $output .=  "\" size=\"50\" maxlength=\"255\">\n      </td>\n    </tr>\n\n    <tr>\n      <th></th>\n      <td>\n        <input type=\"submit\" value=\"        ";
    #line 219 "template/en/custom/admin/flag-type/edit.html.tmpl"
    if (($stash->get('last_action') eq 'enter' || $stash->get('last_action') eq 'copy')) {
    $output .=  "Create ";
    }
    else {
    $output .=  "Save Changes ";
    }
    
    $output .=  "\">\n      </td>\n    </tr>\n\n  </table>\n\n</form>\n";
    #line 227 "template/en/custom/admin/flag-type/edit.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
