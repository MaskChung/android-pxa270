#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1138010588',
        'name' => 'pages/voting.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n";
    #line 23 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    #line 24 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $context->include('global/header.html.tmpl', { 'title' => 'Voting' });
    $output .=  "\n\n<p>";
    #line 26 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  " has a \"voting\" feature. Each product allows users to \nhave a certain number of votes. (Some products may not allow any, which means \nyou can't vote on things in that product at all.) With your vote, you indicate\nwhich ";
    #line 29 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " you think are the most important to be fixed.</p>\n\n<p>Depending on how the administrator has configured the relevant product,\nyou may be able to vote for the same ";
    #line 32 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " more than one time. But \nremember, you only have so many votes to use in total! So, you can either vote \na little for many ";
    #line 34 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  ", or vote a lot for a few ";
    #line 34 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  ".\n</p>\n\n<p>To look at votes:</p>\n\n<ul>\n  <li>Go to the query page. Do a normal query, but enter 1 in the \"At least\n  ___ votes\" field. This will show you items that match your query that\n  have at least one vote.</li>\n</ul>\n\n<p>To vote for ";
    #line 45 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'abug', 0]);
    $output .=  ":</p>\n\n<ul>\n  <li>Bring up the ";
    #line 48 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " in question.</li>\n\n  <li>Click on the \"Vote for this ";
    #line 50 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  "\" link that appears just \n  above the \"Additional Comments\" field. (If no such link appears, then voting \n  may not be allowed in this ";
    #line 52 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  "'s product.)</li>\n\n  <li>Indicate how many votes you want to give this ";
    #line 54 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  ". This page \n  also displays how many votes you've given to other ";
    #line 55 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  ", so you \n  may rebalance your votes as necessary.</li>\n</ul>\n\n<p>You will automatically get email notifying you of any changes that occur\non ";
    #line 60 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " you vote for.</p>\n\n<p>You may review your votes at any time by clicking on the \"<a href=\n\"votes.cgi?action=show_user\">My Votes</a>\" link in the page footer.</p>\n";
    #line 65 "template/en/custom/pages/voting.html.tmpl"
    $output .=  $context->include('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
