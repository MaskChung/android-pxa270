#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1138010588',
        'name' => 'global/field-descs.none.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n";
    #line 24 "template/en/custom/global/field-descs.none.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
    #line 0 "template/en/custom/global/field-descs.none.tmpl"
    $stash->set('field_descs', { '[Bug creation]' => ("[" . $stash->get(['terms', 0, 'Bug', 0]) . " creation]"), 'actual_time' => 'Actual Hours', 'alias' => 'Alias', 'assigned_to' => 'Assignee', 'blocked' => 'Blocks', 'bug_file_loc' => 'URL', 'bug_id' => ($stash->get(['terms', 0, 'Bug', 0]) . " ID"), 'bug_severity' => 'Severity', 'bug_status' => 'Status', 'changeddate' => 'Changed', 'cc' => 'CC', 'classification' => 'Classification', 'cclist_accessible' => 'CC list accessible?', 'component_id' => 'Component ID', 'component' => 'Component', 'creation_ts' => ($stash->get(['terms', 0, 'Bug', 0]) . " Creation time"), 'deadline' => 'Deadline', 'delta_ts' => 'Changed', 'dependson' => 'Depends on', 'dup_id' => 'Duplicate', 'estimated_time' => 'Orig. Est.', 'everconfirmed' => 'Ever confirmed?', 'groupset' => 'Groupset', 'keywords' => 'Keywords', 'newcc' => 'CC', 'op_sys' => 'OS', 'opendate' => 'Opened', 'percentage_complete' => '%Complete', 'priority' => 'Priority', 'product_id' => 'Product ID', 'product' => 'Product', 'qa_contact' => 'QA Contact', 'remaining_time' => 'Hours Left', 'rep_platform' => 'Hardware', 'reporter' => 'Reporter', 'reporter_accessible' => 'Reporter accessible?', 'resolution' => 'Resolution', 'setting' => 'Setting', 'settings' => 'Settings', 'short_desc' => 'Summary', 'status_whiteboard' => 'Whiteboard', 'target_milestone' => 'Target Milestone', 'version' => 'Version', 'votes' => 'Votes', 'work_time' => 'Hours Worked'  });
    $output .=  "\n";
    #line 72 "template/en/custom/global/field-descs.none.tmpl"
    $stash->set('status_descs', { 'UNCONFIRMED' => 'UNCONFIRMED', 'NEW' => 'NEW', 'ASSIGNED' => 'ASSIGNED', 'REOPENED' => 'REOPENED', 'RESOLVED' => 'RESOLVED', 'VERIFIED' => 'VERIFIED', 'CLOSED' => 'CLOSED'  });
    $output .=  "\n";
    #line 80 "template/en/custom/global/field-descs.none.tmpl"
    $stash->set('resolution_descs', { 'FIXED' => 'FIXED', 'INVALID' => 'INVALID', 'WONTFIX' => 'WONTFIX', 'LATER' => 'LATER', 'REMIND' => 'REMIND', 'DUPLICATE' => 'DUPLICATE', 'WORKSFORME' => 'WORKSFORME', 'MOVED' => 'MOVED', '---' => '---', ' ' => ' '  });
    $output .=  "\n";
    #line 91 "template/en/custom/global/field-descs.none.tmpl"
    $output .=  $stash->get(['Hook', 0, 'process', [ 'end' ]]);
    $output .=  "\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
