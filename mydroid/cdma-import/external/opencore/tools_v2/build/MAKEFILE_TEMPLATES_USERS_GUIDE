/*! \page makefile_overview Makefile Templates Guide


This is a description of the makefile templates used by 
certain platforms for the build system. It assumes the 
platform has support for GNU make or some other make system that is 
compatible, such as clearmake (part of Clearcase) operating in 
GNU compatibility mode.

This Makefile system incorporates several features:

<ul>
<li> Easy to tailor template files for different projects.</li>
<li> Easy to create and maintain individual GNUMakefiles </li>
<li> System-wide compilation parameters encapsulated in common
  files</li>
<li> Separate working and installed copies of targets</li>
<li> Automatic dependencies</li>
<li> Use of GNU make, an implementation of make with considerably
  more functionality than most vendors' default make programs.</li>
</ul>


       <center>ASSUMPTIONS ABOUT BASELINE CONFIGURATION</center>

This make system imposes a few restrictions on the layout of the
source code baseline.  Specifically, there must be a single top-level
baseline directory. One reason for the restrictions is to allow 
include directories and library directories to be automatically 
discovered by the makefile system.  The makefile system will find 
all directories named "include" and "installed_include" from the 
current directory up to the specified root of the code base. Similarly, 
directories named "lib" and "installed_lib" are automatically included 
in the library search paths. The automatic discovery of include and library
paths simplifies the creation and maintenance of local makefiles.

Underneath the top-level baseline directory (i.e., baseline root)
is an arbitrary collection of component directories, which can be 
arbitrarily deep.  Each component
is responsible for producing and installing its output (e.g., program or 
library) to an appropriate level in the directory tree.  By convention 
other components will only use header files or libraries that are found 
along the path from the component's directory back to the root directory.

All libraries, and binaries must be installed.  Public header files
associated with binaries can be optionally installed along with the
library.  Directly under each project level, there are src, bin, lib,
and include subdirectories.  Units within the project and units within
other projects that depend upon this one get their libraries and
possibly include files from this installed area.


	     <center>REQUIREMENTS FOR USE</center>

These GNUMakefiles include other GNUMakefiles from a specific
directory and invoke scripts from another directory.  The make files
require the directory containing the GNUMakefile templates to be
stored in the environment variable $MK and the location of the
asscoiated scripts to be set up in the local.mk template.  The
GNUMakefiles in this system use features specific to GNU make, so GNU
make must be available.  Although this document assumes that GNU make
is installed as "gmake", it does not need to be.  The GNUMakefile
system will work fine with it called by another name.


<ul>
  <li>	There is no "gen_make" or "imake" stage to compile
	the template into a working Makefile.  Instead
	the user creates a local GNUMakefile which includes
	the necessary template files when GNU-make is run.
	Therefore changes to GNUMakefile templates in the 
	$(MK) directory take effect immediately and 
	globally so there is little chance of having out
	of date local GNUMakefiles as with Imake.
</li>

  <li>	Dependency info for source files (i.e. *.h files) is
	no longer stored directly in the Makefile.  Instead
	each source file has a corresponding *.d file which 
	contains the dependency information for that file.
	The GNUMakefile then includes these dependency files 
	when GNU-make is run.  NOTE that it is no longer
	necessary to run make depend to update a file's 
	dependency info.  The *.d files will be kept up to
	date as part of the GNUMakefile rules.
</li>

  <li>	It is no longer necessary to keep both object files
	and the corresponding library archive for certain platforms.
	GNU-make can examine a library archive and determine the
	dates of the member object files.  Then it can 
	update the archive directly for those object files that
	need to be rebuilt.
</li>
</ul>


        <center>BUILDING YOUR TARGETS</center>

Generating a GNUmakefile to build your target is a relatively simple
affair, consisting of the declaration of a few macros and then
including $(MK)/gnumake.template.

Three macros are used to determine which template files are used from within 
the $(MK) directory. It will load the template file 
$(ARCHITECTURE)_$(TOOLSET)_$WHAT).mak:

ARCHITECTURE	The name of the architecture for which the target should
		be built (i.e., sun4).  However, it is best *NOT* to put 
                this macro in the local makefiles since it would require
                multiple makefiles to build for different platforms.  Instead
                it is better to either specify this as part of the build 
                command or with an environment variable. The build host type
                will be automatically determined and the host architecture 
                will be used as the build architecture if ARCHITECTURE is not
                set.

TOOLSET		The name of the toolset to use in building the target
		(i.e., gcc or D4314A)

WHAT		What you're building.  This is usually "prog" or "library",
		but certain targets have other facilities available.


For example, to build the "Hello World" program on a Sun using gcc,
you would build this short GNUmakefile:

<pre>
	TOOLSET=gcc
	WHAT=prog

	TARGET=hello
	SRCS=hello.c
	include $(MK)/gnumake.template
</pre>

With ARCHITECTURE=sun

Below is a list of some of the more commonly-used macros for building
programs and libraries.

IMPORTANT: Before building your own GNUmakefile, read the
documentation for the configuration you intend to use.  Build a
GNUmakefile with the ARCHITECTURE, TOOLSET and WHAT macros set
appropriately and type "gmake show-doc."

the top of the .mak file you plan to use (see below for a list of
available templates) for supported macros and special caveats.


DESTDIR		The directory where the target should be installed when a
		"gmake install" is executed.  Note that this should be
		relative to the current directory (i.e., ../../bin/sun4).

DFLAGS		Debugging or other flags for the compiler which are used
		during compiling and linking but not during dependency
		generation.

HDRS		Specifies a list of header files to install when building a
		library  This is optional.

INCDESTDIR	An optional macro for library targets that indicate where the
		files specified in HDRS should be installed.

INCSRCDIR       The INCSRCDIR macro is similar to the SRCDIR macro, but it 
                specifically relates to the files specified in the HDRS 
                macro.

LIBS		A list of libraries for linking.  This should be suitable for
		whatever mechanism the development tools use to find libraries.
		(i.e., "m" specifies /lib/libm.a in most Unix variants.)

SRCDIR          The SRCDIR macro is used to indicate the location of the
                source files (i.e., the files specified in the SRCS and 
                HDRS macros).  If this macro is not set, the current directory
                (i.e., where the makefile is located) will be used.

SRCS		A list of the source files to be used in building the target.

SYSLIBS         This is a macro which is similar to the LIBS directive, but it 
                is used specifically for system libraries which may only be 
                available as shared libraries.  The SYSLIBS dependency handling
                is different than LIBS to deal with limitations of tools like
                clearmake.  SYSLIBS should only be used for system libraries 
                in special cases and not as the norm.

TARGET		The name of the finished target that will be built during
		the make.  This is without any extensions, etc.  If this
		macro is not defined, the name of the current directory
		will be used instead.

XCFLAGS		Extra compiler flags that are not for debugging or the
		preprocessor.  Generally these are compiler-specific flags.

XCLEAN		Extra files that should be deleted whenever the "clean"
		target is built.

XCPPFLAGS	Extra C preprocessor flags for things like -DDEBUG.

XINCDIRS	Extra include directories (beyond the defaults) which should
		be searched when looking for #include files.

XLDFLAGS	Extra linker flags.

XLIBDIRS	A list of extra directories (beyond the defaults) which
		should be searched when looking for libraries during linking.




                <center>NOTEWORTHY INFORMATION</center>

If you're building a library which has include files that will be
exported to the public, those include files either must reside in 
the current directory or in the directory specified by the INCSRCDIR 
macro.  (Use HDRS to specify what headers are to be installed and 
INCDESTDIR to specify where they should go.)


        <center>ADDING SUPPORT FOR NEW PLATFORMS</center>


Adding support for a new platform is usually best accomplished by starting
from the templates files of an existing supported platform.  The generic 
build rules from the general templates files (e.g., prog.mk, library.mk,
etc) should be reused for most cases.  That means that supporting a new 
platform is primarily a matter of providing the appropriate macro definitions
for the the general build rules.  

*/
